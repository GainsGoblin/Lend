{
  "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GLPManager",
      "outputs": [
        {
          "internalType": "contract IGLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WGLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fsGLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract IProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsRouter",
      "outputs": [
        {
          "internalType": "contract IRewardsRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLP",
          "type": "address"
        }
      ],
      "name": "setWGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "transactionIndex": 0,
    "gasUsed": "2307388",
    "logsBloom": "0x
    "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414",
    "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4020904,
        "transactionHash": "0x8727a0434c6f9d1e1d44c4d01d72ba21935cc7f3bad5da6d4a660b86500e412d",
        "address": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0xc8d6aef724b2a92f7eed5d4674deaa5d7d11d61b2a30c17ee5512eba6e3cb414"
      }
    ],
    "blockNumber": 4020904,
    "cumulativeGasUsed": "2307388",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "bf3a6aae5a837f9d6799060f9c5ed15b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GLPManager\",\"outputs\":[{\"internalType\":\"contract IGLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WGLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fsGLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRouter\",\"outputs\":[{\"internalType\":\"contract IRewardsRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLP\",\"type\":\"address\"}],\"name\":\"setWGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedGLPManager.sol\":\"WrappedGLPManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/WrappedGLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    function claimable(address) external view returns (uint); // for fsGLP\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IProtocol {\\n    // Value of a debt \\\"token\\\"\\n    function debtValue(address token) external view returns (uint256);\\n\\n    // Interest on token since last checkpoint\\n    function getTokenAccruedInterest(address token) external view returns (uint256);\\n\\n    // How many tokens does an user owe\\n    function userDebt(address account, address token) external view returns (uint256);\\n\\n    // How much USD does an user owe per token\\n    function userDebtUSD(address account, address token) external view returns (uint256);\\n\\n    // How many lent tokens is it's share token backed by\\n    function getShareValue(address token) external view returns (uint256);\\n\\n    // How many collateral tokens is it's share token backed by\\n    function getCollateralShareValue() external view returns (uint256);\\n\\n    // Fetch the price of an asset from Chainlink oracle\\n    function getLatestPrice(address token) external view returns (uint);\\n\\n    // Price of GLP\\n    function getCollateralPrice() external view returns (uint);\\n\\n    // User's health factor\\n    function accountHealth(address account) external view returns (uint256);\\n\\n    // How much an user has borrowed in total in USD\\n    function accountBorrowedValue(address account) external view returns (uint256);\\n\\n    // How much an user has lent in total in USD\\n    function accountLentValue(address account) external view returns (uint256);\\n\\n    // How much is lent in total in USD\\n    function totalLentValue() external view returns (uint256);\\n\\n    // Value of an user's collateral in USD\\n    function accountCollateralValue(address account) external view returns (uint256);\\n\\n    // Annual interest rate of borrowing a token\\n    function interestRate(address token) external view returns (uint256);\\n\\n    // How many tokens have been borrowed from liquidity\\n    function totalBorrowedAmount(address token) external view returns (uint256);\\n\\n    // How many tokens can an user borrow\\n    function borrowingPower(address account, address token) external view returns (uint256);\\n\\n    // How much can an user borrow in USD\\n    function borrowingPowerUSD(address account) external view returns (uint256); \\n}\\n\\ninterface IRewardsRouter {\\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\\ninterface IRewardTracker {\\n    function claimable(address) external view returns (uint);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ninterface IGLPManager {\\n    function cooldownDuration() external view returns (uint);\\n}\\n\\ncontract WrappedGLPManager {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public WGLP; // Wrapped GLP\\n    IERC20 public weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\n    IERC20 public fsGLP = IERC20(0x1aDDD80E6039594eE970E5872D247bf0414C8903);\\n    IProtocol public protocol; // Lending protocol\\n    address public governance;\\n    bool public canWithdraw;\\n    uint public checkpoint;\\n    IRewardsRouter public rewardsRouter = IRewardsRouter(0xA906F338CB21815cBc4Bc87ace9e68c87eF8d8F1);\\n    IGLPManager public GLPManager = IGLPManager(0x321F653eED006AD1C29D174e17d96351BDe22649);\\n    IVault public vault = IVault(0x489ee077994B6658eAfA855C308275EAd8097C4A);\\n    mapping(address => bool) public allowedToken;\\n\\n    constructor(address _protocol) {\\n        protocol = IProtocol(_protocol);\\n        checkpoint = block.timestamp;\\n        governance = msg.sender;\\n        address token;\\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            allowedToken[token] = true;\\n            IERC20(token).approve(address(GLPManager), type(uint).max);\\n        }\\n    }\\n\\n    function setWGLP(address _WGLP) external {\\n        require(msg.sender == governance);\\n        require(address(WGLP) == address(0), \\\"WGLP already set\\\");\\n        WGLP = IERC20(_WGLP);\\n    }\\n    \\n    function withdraw(address token, uint shareAmount) external returns (uint) {\\n        if(block.timestamp.sub(checkpoint) > 7200) canWithdraw = true; \\n        require(canWithdraw == true, \\\"Cannot withdraw at this time\\\");\\n        uint amount = shareAmount.mul(getShareValue()).div(1e18);\\n        IERC20(WGLP).burn(msg.sender, shareAmount);\\n        uint amountWithdrawn = rewardsRouter.unstakeAndRedeemGlp(token, amount, 1, msg.sender);\\n        return amountWithdrawn;\\n    }\\n\\n    function deposit(address token, uint amount) external {\\n        require(allowedToken[token] == true, \\\"Token not allowed\\\");\\n        require(amount > 0, \\\"Cannot deposit 0\\\");\\n        if(canWithdraw == true) {\\n            require(block.timestamp.sub(checkpoint) >= uint(10800).sub(GLPManager.cooldownDuration()), \\\"Cannot deposit at this time\\\");\\n            checkpoint = block.timestamp;\\n        }\\n        canWithdraw = false;\\n        if (WGLP.totalSupply() > 0 && fsGLP.claimable(address(this)) > 0) compound();\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        amount = rewardsRouter.mintAndStakeGlp(token, amount, 0, 1);\\n        uint amountToMint = amount.mul(1e18).div(getShareValue());\\n        IERC20(WGLP).mint(msg.sender, amountToMint);\\n    }\\n\\n    function compound() internal {\\n        uint wethBefore = IERC20(weth).balanceOf(address(this));\\n        rewardsRouter.handleRewards(\\n            false,\\n            false,\\n            true,\\n            true,\\n            true,\\n            true,\\n            false\\n        );\\n        rewardsRouter.mintAndStakeGlp(\\n            address(weth),\\n            IERC20(weth).balanceOf(address(this)).sub(wethBefore),\\n            1,\\n            1\\n        );\\n    }\\n\\n    function getShareValue() public view returns (uint) {\\n        if (WGLP.totalSupply() == 0) return 1e18;\\n        return fsGLP.balanceOf(address(this)).mul(1e18).div(WGLP.totalSupply());\\n    }\\n}\",\"keccak256\":\"0x51cd2537ad8c228030c87f1b4ef6c2d2bccc5f2b68c1e93d41f1593ff3fa322d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040527382af49447d8a07e3bd95bd0d56f35241523fbab1600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550731addd80e6039594ee970e5872d247bf0414c8903600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073a906f338cb21815cbc4bc87ace9e68c87ef8d8f1600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073321f653eed006ad1c29d174e17d96351bde22649600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073489ee077994b6658eafa855c308275ead8097c4a600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550348015620001ba57600080fd5b5060405162002247380380620022478339818101604052810190620001e0919062000557565b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504260058190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600080600090505b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003059190620005c4565b811015620004e457600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e468baf0826040518263ffffffff1660e01b81526004016200036a919062000607565b602060405180830381865afa15801562000388573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620003ae919062000557565b91506001600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b81526004016200048792919062000635565b6020604051808303816000875af1158015620004a7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004cd91906200069f565b508080620004db9062000700565b91505062000271565b5050506200074e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200051f82620004f2565b9050919050565b620005318162000512565b81146200053d57600080fd5b50565b600081519050620005518162000526565b92915050565b60006020828403121562000570576200056f620004ed565b5b6000620005808482850162000540565b91505092915050565b6000819050919050565b6200059e8162000589565b8114620005aa57600080fd5b50565b600081519050620005be8162000593565b92915050565b600060208284031215620005dd57620005dc620004ed565b5b6000620005ed84828501620005ad565b91505092915050565b620006018162000589565b82525050565b60006020820190506200061e6000830184620005f6565b92915050565b6200062f8162000512565b82525050565b60006040820190506200064c600083018562000624565b6200065b6020830184620005f6565b9392505050565b60008115159050919050565b620006798162000662565b81146200068557600080fd5b50565b60008151905062000699816200066e565b92915050565b600060208284031215620006b857620006b7620004ed565b5b6000620006c88482850162000688565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200070d8262000589565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415620007435762000742620006d1565b5b600182019050919050565b611ae9806200075e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635bf2d5ef11610097578063c2c4c5c111610066578063c2c4c5c114610252578063e152c34a14610270578063f3fef3a31461028e578063fbfa77cf146102be576100f5565b80635bf2d5ef146101c8578063756742f8146101e65780638ce7442614610216578063b51459fe14610234576100f5565b8063437c3289116100d3578063437c32891461015257806347e7ef24146101705780635aa6e6751461018c5780635bf12feb146101aa576100f5565b8063143d51f6146100fa57806329147fab146101185780633fc8cef314610134575b600080fd5b6101026102dc565b60405161010f919061123f565b60405180910390f35b610132600480360381019061012d919061129d565b610302565b005b61013c61042e565b604051610149919061123f565b60405180910390f35b61015a610454565b60405161016791906112e3565b60405180910390f35b61018a6004803603810190610185919061132a565b610658565b005b610194610ba3565b6040516101a19190611379565b60405180910390f35b6101b2610bc9565b6040516101bf91906113b5565b60405180910390f35b6101d0610bef565b6040516101dd919061123f565b60405180910390f35b61020060048036038101906101fb919061129d565b610c13565b60405161020d91906113eb565b60405180910390f35b61021e610c33565b60405161022b9190611427565b60405180910390f35b61023c610c59565b60405161024991906113eb565b60405180910390f35b61025a610c6c565b60405161026791906112e3565b60405180910390f35b610278610c72565b6040516102859190611463565b60405180910390f35b6102a860048036038101906102a3919061132a565b610c98565b6040516102b591906112e3565b60405180910390f35b6102c6610ea3565b6040516102d3919061149f565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e290611517565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e6919061154c565b14156104fc57670de0b6b3a76400009050610655565b61065260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e919061154c565b610644670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f59190611379565b602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610636919061154c565b610ec990919063ffffffff16565b610edf90919063ffffffff16565b90505b90565b60011515600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e2906115c5565b60405180910390fd5b6000811161072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611631565b60405180910390fd5b60011515600460149054906101000a900460ff161515141561084d576107ef600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663352693156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de919061154c565b612a30610ef590919063ffffffff16565b61080460055442610ef590919063ffffffff16565b1015610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061169d565b60405180910390fd5b426005819055505b6000600460146101000a81548160ff02191690831515021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa919061154c565b1180156109a257506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663402914f5306040518263ffffffff1660e01b815260040161095f9190611379565b602060405180830381865afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a0919061154c565b115b156109b0576109af610f0b565b5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109ed939291906116bd565b6020604051808303816000875af1158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611720565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663364e23118383600060016040518563ffffffff1660e01b8152600401610a9494939291906117c3565b6020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061154c565b90506000610b0f610ae6610454565b610b01670de0b6b3a764000085610ec990919063ffffffff16565b610edf90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610b6c929190611808565b600060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b50505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c20610cb260055442610ef590919063ffffffff16565b1115610cd4576001600460146101000a81548160ff0219169083151502179055505b60011515600460149054906101000a900460ff16151514610d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d219061187d565b60405180910390fd5b6000610d60670de0b6b3a7640000610d52610d43610454565b86610ec990919063ffffffff16565b610edf90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b8152600401610dbd929190611808565b600060405180830381600087803b158015610dd757600080fd5b505af1158015610deb573d6000803e3d6000fd5b505050506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f3aa55486846001336040518563ffffffff1660e01b8152600401610e53949392919061189d565b6020604051808303816000875af1158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e96919061154c565b9050809250505092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183610ed79190611911565b905092915050565b60008183610eed919061199a565b905092915050565b60008183610f0391906119cb565b905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f689190611379565b602060405180830381865afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa9919061154c565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330b7000260008060018060018060006040518863ffffffff1660e01b815260040161101697969594939291906119ff565b600060405180830381600087803b15801561103057600080fd5b505af1158015611044573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663364e2311600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661115784600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111089190611379565b602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061154c565b610ef590919063ffffffff16565b6001806040518563ffffffff1660e01b81526004016111799493929190611a6e565b6020604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc919061154c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112056112006111fb846111c0565b6111e0565b6111c0565b9050919050565b6000611217826111ea565b9050919050565b60006112298261120c565b9050919050565b6112398161121e565b82525050565b60006020820190506112546000830184611230565b92915050565b600080fd5b600061126a826111c0565b9050919050565b61127a8161125f565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000602082840312156112b3576112b261125a565b5b60006112c184828501611288565b91505092915050565b6000819050919050565b6112dd816112ca565b82525050565b60006020820190506112f860008301846112d4565b92915050565b611307816112ca565b811461131257600080fd5b50565b600081359050611324816112fe565b92915050565b600080604083850312156113415761134061125a565b5b600061134f85828601611288565b925050602061136085828601611315565b9150509250929050565b6113738161125f565b82525050565b600060208201905061138e600083018461136a565b92915050565b600061139f8261120c565b9050919050565b6113af81611394565b82525050565b60006020820190506113ca60008301846113a6565b92915050565b60008115159050919050565b6113e5816113d0565b82525050565b600060208201905061140060008301846113dc565b92915050565b60006114118261120c565b9050919050565b61142181611406565b82525050565b600060208201905061143c6000830184611418565b92915050565b600061144d8261120c565b9050919050565b61145d81611442565b82525050565b60006020820190506114786000830184611454565b92915050565b60006114898261120c565b9050919050565b6114998161147e565b82525050565b60006020820190506114b46000830184611490565b92915050565b600082825260208201905092915050565b7f57474c5020616c72656164792073657400000000000000000000000000000000600082015250565b60006115016010836114ba565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b9050919050565b600081519050611546816112fe565b92915050565b6000602082840312156115625761156161125a565b5b600061157084828501611537565b91505092915050565b7f546f6b656e206e6f7420616c6c6f776564000000000000000000000000000000600082015250565b60006115af6011836114ba565b91506115ba82611579565b602082019050919050565b600060208201905081810360008301526115de816115a2565b9050919050565b7f43616e6e6f74206465706f736974203000000000000000000000000000000000600082015250565b600061161b6010836114ba565b9150611626826115e5565b602082019050919050565b6000602082019050818103600083015261164a8161160e565b9050919050565b7f43616e6e6f74206465706f73697420617420746869732074696d650000000000600082015250565b6000611687601b836114ba565b915061169282611651565b602082019050919050565b600060208201905081810360008301526116b68161167a565b9050919050565b60006060820190506116d2600083018661136a565b6116df602083018561136a565b6116ec60408301846112d4565b949350505050565b6116fd816113d0565b811461170857600080fd5b50565b60008151905061171a816116f4565b92915050565b6000602082840312156117365761173561125a565b5b60006117448482850161170b565b91505092915050565b6000819050919050565b600061177261176d6117688461174d565b6111e0565b6112ca565b9050919050565b61178281611757565b82525050565b6000819050919050565b60006117ad6117a86117a384611788565b6111e0565b6112ca565b9050919050565b6117bd81611792565b82525050565b60006080820190506117d8600083018761136a565b6117e560208301866112d4565b6117f26040830185611779565b6117ff60608301846117b4565b95945050505050565b600060408201905061181d600083018561136a565b61182a60208301846112d4565b9392505050565b7f43616e6e6f7420776974686472617720617420746869732074696d6500000000600082015250565b6000611867601c836114ba565b915061187282611831565b602082019050919050565b600060208201905081810360008301526118968161185a565b9050919050565b60006080820190506118b2600083018761136a565b6118bf60208301866112d4565b6118cc60408301856117b4565b6118d9606083018461136a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061191c826112ca565b9150611927836112ca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119605761195f6118e2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119a5826112ca565b91506119b0836112ca565b9250826119c0576119bf61196b565b5b828204905092915050565b60006119d6826112ca565b91506119e1836112ca565b9250828210156119f4576119f36118e2565b5b828203905092915050565b600060e082019050611a14600083018a6113dc565b611a2160208301896113dc565b611a2e60408301886113dc565b611a3b60608301876113dc565b611a4860808301866113dc565b611a5560a08301856113dc565b611a6260c08301846113dc565b98975050505050505050565b6000608082019050611a83600083018761136a565b611a9060208301866112d4565b611a9d60408301856117b4565b611aaa60608301846117b4565b9594505050505056fea2646970667358221220d0cf83c0b3d7072bd2baeae78a269c590d0c1b18948e94e7bf696580edc01c9964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635bf2d5ef11610097578063c2c4c5c111610066578063c2c4c5c114610252578063e152c34a14610270578063f3fef3a31461028e578063fbfa77cf146102be576100f5565b80635bf2d5ef146101c8578063756742f8146101e65780638ce7442614610216578063b51459fe14610234576100f5565b8063437c3289116100d3578063437c32891461015257806347e7ef24146101705780635aa6e6751461018c5780635bf12feb146101aa576100f5565b8063143d51f6146100fa57806329147fab146101185780633fc8cef314610134575b600080fd5b6101026102dc565b60405161010f919061123f565b60405180910390f35b610132600480360381019061012d919061129d565b610302565b005b61013c61042e565b604051610149919061123f565b60405180910390f35b61015a610454565b60405161016791906112e3565b60405180910390f35b61018a6004803603810190610185919061132a565b610658565b005b610194610ba3565b6040516101a19190611379565b60405180910390f35b6101b2610bc9565b6040516101bf91906113b5565b60405180910390f35b6101d0610bef565b6040516101dd919061123f565b60405180910390f35b61020060048036038101906101fb919061129d565b610c13565b60405161020d91906113eb565b60405180910390f35b61021e610c33565b60405161022b9190611427565b60405180910390f35b61023c610c59565b60405161024991906113eb565b60405180910390f35b61025a610c6c565b60405161026791906112e3565b60405180910390f35b610278610c72565b6040516102859190611463565b60405180910390f35b6102a860048036038101906102a3919061132a565b610c98565b6040516102b591906112e3565b60405180910390f35b6102c6610ea3565b6040516102d3919061149f565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146103eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e290611517565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e6919061154c565b14156104fc57670de0b6b3a76400009050610655565b61065260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e919061154c565b610644670de0b6b3a7640000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105f59190611379565b602060405180830381865afa158015610612573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610636919061154c565b610ec990919063ffffffff16565b610edf90919063ffffffff16565b90505b90565b60011515600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e2906115c5565b60405180910390fd5b6000811161072e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072590611631565b60405180910390fd5b60011515600460149054906101000a900460ff161515141561084d576107ef600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663352693156040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107de919061154c565b612a30610ef590919063ffffffff16565b61080460055442610ef590919063ffffffff16565b1015610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9061169d565b60405180910390fd5b426005819055505b6000600460146101000a81548160ff02191690831515021790555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa919061154c565b1180156109a257506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663402914f5306040518263ffffffff1660e01b815260040161095f9190611379565b602060405180830381865afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a0919061154c565b115b156109b0576109af610f0b565b5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016109ed939291906116bd565b6020604051808303816000875af1158015610a0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a309190611720565b50600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663364e23118383600060016040518563ffffffff1660e01b8152600401610a9494939291906117c3565b6020604051808303816000875af1158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad7919061154c565b90506000610b0f610ae6610454565b610b01670de0b6b3a764000085610ec990919063ffffffff16565b610edf90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933836040518363ffffffff1660e01b8152600401610b6c929190611808565b600060405180830381600087803b158015610b8657600080fd5b505af1158015610b9a573d6000803e3d6000fd5b50505050505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60096020528060005260406000206000915054906101000a900460ff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b60055481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611c20610cb260055442610ef590919063ffffffff16565b1115610cd4576001600460146101000a81548160ff0219169083151502179055505b60011515600460149054906101000a900460ff16151514610d2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d219061187d565b60405180910390fd5b6000610d60670de0b6b3a7640000610d52610d43610454565b86610ec990919063ffffffff16565b610edf90919063ffffffff16565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b8152600401610dbd929190611808565b600060405180830381600087803b158015610dd757600080fd5b505af1158015610deb573d6000803e3d6000fd5b505050506000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630f3aa55486846001336040518563ffffffff1660e01b8152600401610e53949392919061189d565b6020604051808303816000875af1158015610e72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e96919061154c565b9050809250505092915050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183610ed79190611911565b905092915050565b60008183610eed919061199a565b905092915050565b60008183610f0391906119cb565b905092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f689190611379565b602060405180830381865afa158015610f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa9919061154c565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166330b7000260008060018060018060006040518863ffffffff1660e01b815260040161101697969594939291906119ff565b600060405180830381600087803b15801561103057600080fd5b505af1158015611044573d6000803e3d6000fd5b50505050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663364e2311600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661115784600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111089190611379565b602060405180830381865afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611149919061154c565b610ef590919063ffffffff16565b6001806040518563ffffffff1660e01b81526004016111799493929190611a6e565b6020604051808303816000875af1158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc919061154c565b5050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006112056112006111fb846111c0565b6111e0565b6111c0565b9050919050565b6000611217826111ea565b9050919050565b60006112298261120c565b9050919050565b6112398161121e565b82525050565b60006020820190506112546000830184611230565b92915050565b600080fd5b600061126a826111c0565b9050919050565b61127a8161125f565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000602082840312156112b3576112b261125a565b5b60006112c184828501611288565b91505092915050565b6000819050919050565b6112dd816112ca565b82525050565b60006020820190506112f860008301846112d4565b92915050565b611307816112ca565b811461131257600080fd5b50565b600081359050611324816112fe565b92915050565b600080604083850312156113415761134061125a565b5b600061134f85828601611288565b925050602061136085828601611315565b9150509250929050565b6113738161125f565b82525050565b600060208201905061138e600083018461136a565b92915050565b600061139f8261120c565b9050919050565b6113af81611394565b82525050565b60006020820190506113ca60008301846113a6565b92915050565b60008115159050919050565b6113e5816113d0565b82525050565b600060208201905061140060008301846113dc565b92915050565b60006114118261120c565b9050919050565b61142181611406565b82525050565b600060208201905061143c6000830184611418565b92915050565b600061144d8261120c565b9050919050565b61145d81611442565b82525050565b60006020820190506114786000830184611454565b92915050565b60006114898261120c565b9050919050565b6114998161147e565b82525050565b60006020820190506114b46000830184611490565b92915050565b600082825260208201905092915050565b7f57474c5020616c72656164792073657400000000000000000000000000000000600082015250565b60006115016010836114ba565b915061150c826114cb565b602082019050919050565b60006020820190508181036000830152611530816114f4565b9050919050565b600081519050611546816112fe565b92915050565b6000602082840312156115625761156161125a565b5b600061157084828501611537565b91505092915050565b7f546f6b656e206e6f7420616c6c6f776564000000000000000000000000000000600082015250565b60006115af6011836114ba565b91506115ba82611579565b602082019050919050565b600060208201905081810360008301526115de816115a2565b9050919050565b7f43616e6e6f74206465706f736974203000000000000000000000000000000000600082015250565b600061161b6010836114ba565b9150611626826115e5565b602082019050919050565b6000602082019050818103600083015261164a8161160e565b9050919050565b7f43616e6e6f74206465706f73697420617420746869732074696d650000000000600082015250565b6000611687601b836114ba565b915061169282611651565b602082019050919050565b600060208201905081810360008301526116b68161167a565b9050919050565b60006060820190506116d2600083018661136a565b6116df602083018561136a565b6116ec60408301846112d4565b949350505050565b6116fd816113d0565b811461170857600080fd5b50565b60008151905061171a816116f4565b92915050565b6000602082840312156117365761173561125a565b5b60006117448482850161170b565b91505092915050565b6000819050919050565b600061177261176d6117688461174d565b6111e0565b6112ca565b9050919050565b61178281611757565b82525050565b6000819050919050565b60006117ad6117a86117a384611788565b6111e0565b6112ca565b9050919050565b6117bd81611792565b82525050565b60006080820190506117d8600083018761136a565b6117e560208301866112d4565b6117f26040830185611779565b6117ff60608301846117b4565b95945050505050565b600060408201905061181d600083018561136a565b61182a60208301846112d4565b9392505050565b7f43616e6e6f7420776974686472617720617420746869732074696d6500000000600082015250565b6000611867601c836114ba565b915061187282611831565b602082019050919050565b600060208201905081810360008301526118968161185a565b9050919050565b60006080820190506118b2600083018761136a565b6118bf60208301866112d4565b6118cc60408301856117b4565b6118d9606083018461136a565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061191c826112ca565b9150611927836112ca565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156119605761195f6118e2565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006119a5826112ca565b91506119b0836112ca565b9250826119c0576119bf61196b565b5b828204905092915050565b60006119d6826112ca565b91506119e1836112ca565b9250828210156119f4576119f36118e2565b5b828203905092915050565b600060e082019050611a14600083018a6113dc565b611a2160208301896113dc565b611a2e60408301886113dc565b611a3b60608301876113dc565b611a4860808301866113dc565b611a5560a08301856113dc565b611a6260c08301846113dc565b98975050505050505050565b6000608082019050611a83600083018761136a565b611a9060208301866112d4565b611a9d60408301856117b4565b611aaa60608301846117b4565b9594505050505056fea2646970667358221220d0cf83c0b3d7072bd2baeae78a269c590d0c1b18948e94e7bf696580edc01c9964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 609,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "WGLP",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)412"
      },
      {
        "astId": 615,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)412"
      },
      {
        "astId": 621,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "fsGLP",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)412"
      },
      {
        "astId": 624,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "protocol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IProtocol)532"
      },
      {
        "astId": 626,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 628,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "canWithdraw",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 630,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "checkpoint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 636,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "rewardsRouter",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IRewardsRouter)576"
      },
      {
        "astId": 642,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "GLPManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IGLPManager)603"
      },
      {
        "astId": 648,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "vault",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IVault)597"
      },
      {
        "astId": 652,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "allowedToken",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)412": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGLPManager)603": {
        "encoding": "inplace",
        "label": "contract IGLPManager",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocol)532": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsRouter)576": {
        "encoding": "inplace",
        "label": "contract IRewardsRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)597": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}