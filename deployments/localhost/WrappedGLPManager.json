{
  "address": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GLPManager",
      "outputs": [
        {
          "internalType": "contract IGLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WGLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowedToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canWithdraw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fsGLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract IProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsRouter",
      "outputs": [
        {
          "internalType": "contract IRewardsRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLP",
          "type": "address"
        }
      ],
      "name": "setWGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x4A679253410272dd5232B3Ff7cF5dbB88f295319",
    "transactionIndex": 0,
    "gasUsed": "1604403",
    "logsBloom": "0x00000000000000000000000000020000000004008000000000000000000000100000000020000000000000000000000010004000000000000000000000200008000010010000000001000000000000000000000000000000000200000000000000000020000000000000000500000000000000000000000800000000000000400010000000000001000000000000000000000000000000000000080000000000020000000000000000000010000000000000000040000000000280000000000000008000000000000000000000000000200000000000200000000000080000000010000020000000000800000000000010000000000000000000000000000004",
    "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1",
    "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xFEa7a6a0B346362BF88A9e4A88416B77a57D6c2A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 6,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 7,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 4481826,
        "transactionHash": "0x3f63713d38df0f7c8dc633976fb7e5aff5348ec8bc4c1b1716e27a7f5689d045",
        "address": "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000004a679253410272dd5232b3ff7cf5dbb88f295319",
          "0x000000000000000000000000321f653eed006ad1c29d174e17d96351bde22649"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 8,
        "blockHash": "0x7b9900ee634c9d0f02565b859627fc0a78c944c32f234c74223259e5a9c15aa1"
      }
    ],
    "blockNumber": 4481826,
    "cumulativeGasUsed": "1604403",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9"
  ],
  "solcInputHash": "1e9ca5e654e202500e8458b7cff1e5eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GLPManager\",\"outputs\":[{\"internalType\":\"contract IGLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WGLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fsGLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRouter\",\"outputs\":[{\"internalType\":\"contract IRewardsRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLP\",\"type\":\"address\"}],\"name\":\"setWGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedGLPManager.sol\":\"WrappedGLPManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/WrappedGLPManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    function claimable(address) external view returns (uint); // for fsGLP\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IProtocol {\\n    // Value of a debt \\\"token\\\"\\n    function debtValue(address token) external view returns (uint256);\\n\\n    // Interest on token since last checkpoint\\n    function getTokenAccruedInterest(address token) external view returns (uint256);\\n\\n    // How many tokens does an user owe\\n    function userDebt(address account, address token) external view returns (uint256);\\n\\n    // How much USD does an user owe per token\\n    function userDebtUSD(address account, address token) external view returns (uint256);\\n\\n    // How many lent tokens is it's share token backed by\\n    function getShareValue(address token) external view returns (uint256);\\n\\n    // How many collateral tokens is it's share token backed by\\n    function getCollateralShareValue() external view returns (uint256);\\n\\n    // Fetch the price of an asset from Chainlink oracle\\n    function getLatestPrice(address token) external view returns (uint);\\n\\n    // Price of GLP\\n    function getCollateralPrice() external view returns (uint);\\n\\n    // User's health factor\\n    function accountHealth(address account) external view returns (uint256);\\n\\n    // How much an user has borrowed in total in USD\\n    function accountBorrowedValue(address account) external view returns (uint256);\\n\\n    // How much an user has lent in total in USD\\n    function accountLentValue(address account) external view returns (uint256);\\n\\n    // How much is lent in total in USD\\n    function totalLentValue() external view returns (uint256);\\n\\n    // Value of an user's collateral in USD\\n    function accountCollateralValue(address account) external view returns (uint256);\\n\\n    // Annual interest rate of borrowing a token\\n    function interestRate(address token) external view returns (uint256);\\n\\n    // How many tokens have been borrowed from liquidity\\n    function totalBorrowedAmount(address token) external view returns (uint256);\\n\\n    // How many tokens can an user borrow\\n    function borrowingPower(address account, address token) external view returns (uint256);\\n\\n    // How much can an user borrow in USD\\n    function borrowingPowerUSD(address account) external view returns (uint256); \\n}\\n\\ninterface IRewardsRouter {\\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\\ninterface IRewardTracker {\\n    function claimable(address) external view returns (uint);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ninterface IGLPManager {\\n    function cooldownDuration() external view returns (uint);\\n}\\n\\ncontract WrappedGLPManager {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public WGLP; // Wrapped GLP\\n    IERC20 public weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\\n    IERC20 public fsGLP = IERC20(0x1aDDD80E6039594eE970E5872D247bf0414C8903);\\n    IProtocol public protocol; // Lending protocol\\n    address public governance;\\n    bool public canWithdraw;\\n    uint public checkpoint;\\n    IRewardsRouter public rewardsRouter = IRewardsRouter(0xA906F338CB21815cBc4Bc87ace9e68c87eF8d8F1);\\n    IGLPManager public GLPManager = IGLPManager(0x321F653eED006AD1C29D174e17d96351BDe22649);\\n    IVault public vault = IVault(0x489ee077994B6658eAfA855C308275EAd8097C4A);\\n    mapping(address => bool) public allowedToken;\\n\\n    constructor(address _protocol) {\\n        protocol = IProtocol(_protocol);\\n        checkpoint = block.timestamp;\\n        governance = msg.sender;\\n        address token;\\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            allowedToken[token] = true;\\n            IERC20(token).approve(address(GLPManager), type(uint).max);\\n        }\\n    }\\n\\n    function setWGLP(address _WGLP) external {\\n        require(msg.sender == governance);\\n        require(address(WGLP) == address(0), \\\"WGLP already set\\\");\\n        WGLP = IERC20(_WGLP);\\n    }\\n    \\n    function withdraw(address token, uint shareAmount) external returns (uint) {\\n        if(block.timestamp.sub(checkpoint) > 7200) canWithdraw = true; \\n        require(canWithdraw == true, \\\"Cannot withdraw at this time\\\");\\n        uint amount = shareAmount.mul(getShareValue()).div(1e18);\\n        IERC20(WGLP).burn(msg.sender, shareAmount);\\n        uint amountWithdrawn = rewardsRouter.unstakeAndRedeemGlp(token, amount, 1, msg.sender);\\n        return amountWithdrawn;\\n    }\\n\\n    function deposit(address token, uint amount) external {\\n        require(allowedToken[token] == true, \\\"Token not allowed\\\");\\n        require(amount > 0, \\\"Cannot deposit 0\\\");\\n        if(canWithdraw == true) {\\n            require(block.timestamp.sub(checkpoint) >= uint(10800).sub(GLPManager.cooldownDuration()), \\\"Cannot deposit at this time\\\");\\n            checkpoint = block.timestamp;\\n        }\\n        canWithdraw = false;\\n        if (WGLP.totalSupply() > 0 && fsGLP.claimable(address(this)) > 0) compound();\\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\\n        amount = rewardsRouter.mintAndStakeGlp(token, amount, 0, 1);\\n        uint amountToMint = amount.mul(1e18).div(getShareValue());\\n        IERC20(WGLP).mint(msg.sender, amountToMint);\\n    }\\n\\n    function compound() internal {\\n        uint wethBefore = IERC20(weth).balanceOf(address(this));\\n        rewardsRouter.handleRewards(\\n            false,\\n            false,\\n            true,\\n            true,\\n            true,\\n            true,\\n            false\\n        );\\n        rewardsRouter.mintAndStakeGlp(\\n            address(weth),\\n            IERC20(weth).balanceOf(address(this)).sub(wethBefore),\\n            1,\\n            1\\n        );\\n    }\\n\\n    function getShareValue() public view returns (uint) {\\n        if (WGLP.totalSupply() == 0) return 1e18;\\n        return fsGLP.balanceOf(address(this)).mul(1e18).div(WGLP.totalSupply());\\n    }\\n}\",\"keccak256\":\"0x51cd2537ad8c228030c87f1b4ef6c2d2bccc5f2b68c1e93d41f1593ff3fa322d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b03199081167382af49447d8a07e3bd95bd0d56f35241523fbab117909155600280548216731addd80e6039594ee970e5872d247bf0414c890317905560068054821673a906f338cb21815cbc4bc87ace9e68c87ef8d8f117905560078054821673321f653eed006ad1c29d174e17d96351bde226491790556008805490911673489ee077994b6658eafa855c308275ead8097c4a179055348015620000b357600080fd5b50604051620011fd380380620011fd833981016040819052620000d691620002ae565b600380546001600160a01b0383166001600160a01b0319918216179091554260055560048054909116331790556000805b600860009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200015b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001819190620002e0565b811015620002a557600854604051630e468baf60e41b8152600481018390526001600160a01b039091169063e468baf090602401602060405180830381865afa158015620001d3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f99190620002ae565b6001600160a01b0381811660008181526009602052604090819020805460ff19166001179055600754905163095ea7b360e01b815292166004830152600019602483015291935063095ea7b3906044016020604051808303816000875af115801562000269573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200028f9190620002fa565b50806200029c816200031e565b91505062000107565b50505062000348565b600060208284031215620002c157600080fd5b81516001600160a01b0381168114620002d957600080fd5b9392505050565b600060208284031215620002f357600080fd5b5051919050565b6000602082840312156200030d57600080fd5b81518015158114620002d957600080fd5b60006000198214156200034157634e487b7160e01b600052601160045260246000fd5b5060010190565b610ea580620003586000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80635bf2d5ef11610097578063c2c4c5c111610066578063c2c4c5c11461020e578063e152c34a14610217578063f3fef3a31461022a578063fbfa77cf1461023d57600080fd5b80635bf2d5ef146101a1578063756742f8146101b45780638ce74426146101e7578063b51459fe146101fa57600080fd5b8063437c3289116100d3578063437c32891461015257806347e7ef24146101685780635aa6e6751461017b5780635bf12feb1461018e57600080fd5b8063143d51f6146100fa57806329147fab1461012a5780633fc8cef31461013f575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d610138366004610d81565b610250565b005b60015461010d906001600160a01b031681565b61015a6102ff565b604051908152602001610121565b61013d610176366004610d9c565b610482565b60045461010d906001600160a01b031681565b60075461010d906001600160a01b031681565b60005461010d906001600160a01b031681565b6101d76101c2366004610d81565b60096020526000908152604090205460ff1681565b6040519015158152602001610121565b60035461010d906001600160a01b031681565b6004546101d790600160a01b900460ff1681565b61015a60055481565b60065461010d906001600160a01b031681565b61015a610238366004610d9c565b610933565b60085461010d906001600160a01b031681565b6004546001600160a01b0316331461026757600080fd5b6000546001600160a01b0316156102c55760405162461bcd60e51b815260206004820152601060248201527f57474c5020616c7265616479207365740000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610dc6565b6103885750670de0b6b3a764000090565b600054604080516318160ddd60e01b8152905161047d926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610dc6565b6002546040516370a0823160e01b815230600482015261047791670de0b6b3a7640000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104719190610dc6565b90610b0c565b90610b1f565b905090565b6001600160a01b03821660009081526009602052604090205460ff1615156001146104ef5760405162461bcd60e51b815260206004820152601160248201527f546f6b656e206e6f7420616c6c6f77656400000000000000000000000000000060448201526064016102bc565b6000811161053f5760405162461bcd60e51b815260206004820152601060248201527f43616e6e6f74206465706f73697420300000000000000000000000000000000060448201526064016102bc565b600454600160a01b900460ff1615156001141561064857600754604080517f3526931500000000000000000000000000000000000000000000000000000000815290516105e7926001600160a01b03169163352693159160048083019260209291908290030181865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610dc6565b612a3090610b2b565b6005546105f5904290610b2b565b10156106435760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74206465706f73697420617420746869732074696d65000000000060448201526064016102bc565b426005555b6004805460ff60a01b1916815560008054604080516318160ddd60e01b8152905192936001600160a01b03909216926318160ddd928281019260209291908290030181865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190610dc6565b11801561075357506002546040517f402914f50000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b03169063402914f590602401602060405180830381865afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190610dc6565b115b1561076057610760610b37565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190610ddf565b506006546040517f364e23110000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905260006044830152600160648301529091169063364e2311906084016020604051808303816000875af115801561086b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088f9190610dc6565b905060006108b061089e6102ff565b61047784670de0b6b3a7640000610b0c565b6000546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b50505050505050565b6000611c2061094d60055442610b2b90919063ffffffff16565b1115610967576004805460ff60a01b1916600160a01b1790555b600454600160a01b900460ff1615156001146109c55760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f7420776974686472617720617420746869732074696d650000000060448201526064016102bc565b60006109e5670de0b6b3a76400006104776109de6102ff565b8690610b0c565b6000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018690529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b158015610a4b57600080fd5b505af1158015610a5f573d6000803e3d6000fd5b50506006546040517f0f3aa5540000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820186905260016044830152336064830152600094509091169150630f3aa554906084016020604051808303816000875af1158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190610dc6565b95945050505050565b6000610b188284610e17565b9392505050565b6000610b188284610e36565b6000610b188284610e58565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190610dc6565b6006546040517f30b7000200000000000000000000000000000000000000000000000000000000815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b50506006546001546040516370a0823160e01b81523060048201526001600160a01b03928316945063364e23119350911690610ccc90859083906370a0823190602401602060405180830381865afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190610dc6565b90610b2b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260016044820181905260648201526084016020604051808303816000875af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d619190610dc6565b5050565b80356001600160a01b0381168114610d7c57600080fd5b919050565b600060208284031215610d9357600080fd5b610b1882610d65565b60008060408385031215610daf57600080fd5b610db883610d65565b946020939093013593505050565b600060208284031215610dd857600080fd5b5051919050565b600060208284031215610df157600080fd5b81518015158114610b1857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610e3157610e31610e01565b500290565b600082610e5357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610e6a57610e6a610e01565b50039056fea26469706673582212206c3ae974dbed4ba9767a52b12cd4f8c4273869df0959024a707aa1fa465d891764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c80635bf2d5ef11610097578063c2c4c5c111610066578063c2c4c5c11461020e578063e152c34a14610217578063f3fef3a31461022a578063fbfa77cf1461023d57600080fd5b80635bf2d5ef146101a1578063756742f8146101b45780638ce74426146101e7578063b51459fe146101fa57600080fd5b8063437c3289116100d3578063437c32891461015257806347e7ef24146101685780635aa6e6751461017b5780635bf12feb1461018e57600080fd5b8063143d51f6146100fa57806329147fab1461012a5780633fc8cef31461013f575b600080fd5b60025461010d906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61013d610138366004610d81565b610250565b005b60015461010d906001600160a01b031681565b61015a6102ff565b604051908152602001610121565b61013d610176366004610d9c565b610482565b60045461010d906001600160a01b031681565b60075461010d906001600160a01b031681565b60005461010d906001600160a01b031681565b6101d76101c2366004610d81565b60096020526000908152604090205460ff1681565b6040519015158152602001610121565b60035461010d906001600160a01b031681565b6004546101d790600160a01b900460ff1681565b61015a60055481565b60065461010d906001600160a01b031681565b61015a610238366004610d9c565b610933565b60085461010d906001600160a01b031681565b6004546001600160a01b0316331461026757600080fd5b6000546001600160a01b0316156102c55760405162461bcd60e51b815260206004820152601060248201527f57474c5020616c7265616479207365740000000000000000000000000000000060448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60008060009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190610dc6565b6103885750670de0b6b3a764000090565b600054604080516318160ddd60e01b8152905161047d926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa1580156103d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f79190610dc6565b6002546040516370a0823160e01b815230600482015261047791670de0b6b3a7640000916001600160a01b03909116906370a0823190602401602060405180830381865afa15801561044d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104719190610dc6565b90610b0c565b90610b1f565b905090565b6001600160a01b03821660009081526009602052604090205460ff1615156001146104ef5760405162461bcd60e51b815260206004820152601160248201527f546f6b656e206e6f7420616c6c6f77656400000000000000000000000000000060448201526064016102bc565b6000811161053f5760405162461bcd60e51b815260206004820152601060248201527f43616e6e6f74206465706f73697420300000000000000000000000000000000060448201526064016102bc565b600454600160a01b900460ff1615156001141561064857600754604080517f3526931500000000000000000000000000000000000000000000000000000000815290516105e7926001600160a01b03169163352693159160048083019260209291908290030181865afa1580156105ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105de9190610dc6565b612a3090610b2b565b6005546105f5904290610b2b565b10156106435760405162461bcd60e51b815260206004820152601b60248201527f43616e6e6f74206465706f73697420617420746869732074696d65000000000060448201526064016102bc565b426005555b6004805460ff60a01b1916815560008054604080516318160ddd60e01b8152905192936001600160a01b03909216926318160ddd928281019260209291908290030181865afa15801561069f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c39190610dc6565b11801561075357506002546040517f402914f50000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b03169063402914f590602401602060405180830381865afa15801561072d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107519190610dc6565b115b1561076057610760610b37565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290526001600160a01b038316906323b872dd906064016020604051808303816000875af11580156107cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f09190610ddf565b506006546040517f364e23110000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301526024820184905260006044830152600160648301529091169063364e2311906084016020604051808303816000875af115801561086b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088f9190610dc6565b905060006108b061089e6102ff565b61047784670de0b6b3a7640000610b0c565b6000546040517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018390529192506001600160a01b0316906340c10f1990604401600060405180830381600087803b15801561091657600080fd5b505af115801561092a573d6000803e3d6000fd5b50505050505050565b6000611c2061094d60055442610b2b90919063ffffffff16565b1115610967576004805460ff60a01b1916600160a01b1790555b600454600160a01b900460ff1615156001146109c55760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f7420776974686472617720617420746869732074696d650000000060448201526064016102bc565b60006109e5670de0b6b3a76400006104776109de6102ff565b8690610b0c565b6000546040517f9dc29fac000000000000000000000000000000000000000000000000000000008152336004820152602481018690529192506001600160a01b031690639dc29fac90604401600060405180830381600087803b158015610a4b57600080fd5b505af1158015610a5f573d6000803e3d6000fd5b50506006546040517f0f3aa5540000000000000000000000000000000000000000000000000000000081526001600160a01b0388811660048301526024820186905260016044830152336064830152600094509091169150630f3aa554906084016020604051808303816000875af1158015610adf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b039190610dc6565b95945050505050565b6000610b188284610e17565b9392505050565b6000610b188284610e36565b6000610b188284610e58565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba49190610dc6565b6006546040517f30b7000200000000000000000000000000000000000000000000000000000000815260006004820181905260248201819052600160448301819052606483018190526084830181905260a483015260c48201529192506001600160a01b0316906330b700029060e401600060405180830381600087803b158015610c2e57600080fd5b505af1158015610c42573d6000803e3d6000fd5b50506006546001546040516370a0823160e01b81523060048201526001600160a01b03928316945063364e23119350911690610ccc90859083906370a0823190602401602060405180830381865afa158015610ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc69190610dc6565b90610b2b565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b039092166004830152602482015260016044820181905260648201526084016020604051808303816000875af1158015610d3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d619190610dc6565b5050565b80356001600160a01b0381168114610d7c57600080fd5b919050565b600060208284031215610d9357600080fd5b610b1882610d65565b60008060408385031215610daf57600080fd5b610db883610d65565b946020939093013593505050565b600060208284031215610dd857600080fd5b5051919050565b600060208284031215610df157600080fd5b81518015158114610b1857600080fd5b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610e3157610e31610e01565b500290565b600082610e5357634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610e6a57610e6a610e01565b50039056fea26469706673582212206c3ae974dbed4ba9767a52b12cd4f8c4273869df0959024a707aa1fa465d891764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3704,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "WGLP",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)3507"
      },
      {
        "astId": 3710,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3507"
      },
      {
        "astId": 3716,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "fsGLP",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)3507"
      },
      {
        "astId": 3719,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "protocol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IProtocol)3627"
      },
      {
        "astId": 3721,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3723,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "canWithdraw",
        "offset": 20,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 3725,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "checkpoint",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3731,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "rewardsRouter",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IRewardsRouter)3671"
      },
      {
        "astId": 3737,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "GLPManager",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IGLPManager)3698"
      },
      {
        "astId": 3743,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "vault",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IVault)3692"
      },
      {
        "astId": 3747,
        "contract": "contracts/WrappedGLPManager.sol:WrappedGLPManager",
        "label": "allowedToken",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)3507": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IGLPManager)3698": {
        "encoding": "inplace",
        "label": "contract IGLPManager",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocol)3627": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsRouter)3671": {
        "encoding": "inplace",
        "label": "contract IRewardsRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)3692": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}