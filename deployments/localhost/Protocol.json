{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rewardsRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_GLP",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lnxReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakeReward",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_GLPManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GLPManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WGLP",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WGLPManager",
      "outputs": [
        {
          "internalType": "contract IWGLPManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountBorrowedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "accountLentValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowShare",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowTokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "borrowingPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowingPowerUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "debtValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "decimalMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getShareValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenAccruedInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialBorrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialLentAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "interestCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnxReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ltv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "repayAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "rescueExcess",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsRouter",
      "outputs": [
        {
          "internalType": "contract IRewardsRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "share",
          "type": "address"
        }
      ],
      "name": "setBorrowToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setBorrowTokenAllowed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLP",
          "type": "address"
        }
      ],
      "name": "setWGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLPManager",
          "type": "address"
        }
      ],
      "name": "setWGLPManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ltv",
          "type": "uint256"
        }
      ],
      "name": "setltv",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeReward",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPendingLiquidationUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalBorrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLentValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPendingLiquidationUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPendingLiquidationWGLP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "totalTokenDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "userDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "userDebtUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shareAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawCollateralAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x334598704e53c19f82b4c1df6a9c66651badd9065efbd26d0d9243bef86efeec",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "3155292",
    "logsBloom": "0x
    "blockHash": "0x994b7cb97860e54db799d7fab90f8914604f68977784244bca028f5a7b9ab97a",
    "transactionHash": "0x334598704e53c19f82b4c1df6a9c66651badd9065efbd26d0d9243bef86efeec",
    "logs": [],
    "blockNumber": 4407485,
    "cumulativeGasUsed": "3155292",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    "0xA906F338CB21815cBc4Bc87ace9e68c87eF8d8F1",
    "0x4277f8F2c384827B5273592FF7CeBd9f2C1ac258",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "0x1CF4579904EB2ACDA0E4081E39eC10d0c32B5DE3",
    "0x321F653eED006AD1C29D174e17d96351BDe22649"
  ],
  "solcInputHash": "1e9ca5e654e202500e8458b7cff1e5eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GLP\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lnxReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakeReward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GLPManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GLPManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WGLP\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WGLPManager\",\"outputs\":[{\"internalType\":\"contract IWGLPManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountBorrowedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"accountLentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowTokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"borrowingPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowingPowerUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"debtValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"decimalMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getShareValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenAccruedInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialLentAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"interestCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnxReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ltv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"repayAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"rescueExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsRouter\",\"outputs\":[{\"internalType\":\"contract IRewardsRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"share\",\"type\":\"address\"}],\"name\":\"setBorrowToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setBorrowTokenAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLP\",\"type\":\"address\"}],\"name\":\"setWGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLPManager\",\"type\":\"address\"}],\"name\":\"setWGLPManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"}],\"name\":\"setltv\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeReward\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPendingLiquidationUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLentValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingLiquidationUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingLiquidationWGLP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"totalTokenDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"userDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"userDebtUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shareAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawCollateralAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Protocol.sol\":\"Protocol\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/Protocol.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ninterface IPriceFeed {\\n    function getPrice(address, bool, bool, bool) external view returns (uint256);\\n}\\n\\ninterface IRewardsRouter {\\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\\n    function handleRewards(\\n        bool _shouldClaimGmx,\\n        bool _shouldStakeGmx,\\n        bool _shouldClaimEsGmx,\\n        bool _shouldStakeEsGmx,\\n        bool _shouldStakeMultiplierPoints,\\n        bool _shouldClaimWeth,\\n        bool _shouldConvertWethToEth\\n    ) external;\\n}\\n\\ninterface ILNXReward {\\n    function claimRewards(address account) external;\\n}\\n\\ninterface IStakeReward {\\n    function receiveRewards(address token, uint amount) external;\\n}\\n\\ninterface IGLPManager {\\n    function getAumInUsdg(bool) external view returns (uint256);\\n}\\n\\ninterface IWGLPManager {\\n    function getShareValue() external view returns (uint256);\\n    function canWithdraw() external view returns (bool);\\n    function compound() external;\\n    function withdraw(address, uint) external returns (uint256);\\n}\\n\\ncontract Protocol {\\n\\n    using SafeMath for uint;\\n\\n    mapping(address => bool) public borrowToken; // Token allowed to be deposited/borrowed\\n    mapping(address => address) public borrowShare; // Share token from lending\\n    mapping(address => uint) public borrowTokenBalance; // Tracks balance of deposited tokens\\n    mapping(address => uint) public initialLentAmount; // Tracks the amount of tokens borrowed initially; w/o interest, liquidations\\n\\n    mapping(address => uint) public decimalMultiplier; // Decimals needed to normalize to 1e18\\n    mapping(address => uint) public tokenDebt; // Tracks amount of tokens owed\\n    mapping(address => mapping(address => uint)) public borrowedAmount; // User debt shares\\n    mapping(address => mapping(address => uint)) public initialBorrowedAmount; // User initial borrowed amount\\n    mapping(address => uint) public interestCheckpoint; // Tracks token accrued interest using time\\n\\n    uint256 public totalCollateral; // Total WGLP deposited\\n    mapping(address => uint) public userCollateral; // WGLP deposited by users\\n\\n    uint256 public totalPendingLiquidationUSD;\\n    uint256 public totalPendingLiquidationWGLP;\\n    mapping(address => uint) public tokenPendingLiquidationUSD;\\n\\n    address public governance;\\n    IVault public vault;\\n    IRewardsRouter public rewardsRouter;\\n    IERC20 public WGLP;\\n    IERC20 public GLP;\\n    address public weth;\\n    uint public ltv = 50; // 50 is 50% GLP LTV\\n    address public lnxReward;\\n    address public stakeReward;\\n    IPriceFeed public priceFeed;\\n    address public GLPManager;\\n    IWGLPManager public WGLPManager;\\n\\n    constructor(\\n        address _vault,\\n        address _rewardsRouter,\\n        address _GLP,\\n        address _weth,\\n        address _lnxReward,\\n        address _stakeReward,\\n        address _priceFeed,\\n        address _GLPManager\\n    ) {\\n        governance = msg.sender;\\n        vault = IVault(_vault);\\n        rewardsRouter = IRewardsRouter(_rewardsRouter);\\n        GLP = IERC20(_GLP);\\n        weth = _weth;\\n        lnxReward = _lnxReward;\\n        stakeReward = _stakeReward;\\n        priceFeed = IPriceFeed(_priceFeed);\\n        GLPManager = _GLPManager;\\n    }\\n\\n\\n\\n    // End user functions\\n\\n    function depositCollateral(uint256 amount) external {\\n        WGLP.transferFrom(msg.sender, address(this), amount);\\n        userCollateral[msg.sender] += amount;\\n        totalCollateral += amount;\\n    }\\n\\n    function withdrawCollateralAll() external {\\n        require(accountBorrowedValue(msg.sender) == 0, \\\"Account has debt\\\");\\n        uint amount = userCollateral[msg.sender];\\n        withdrawCollateral(amount);\\n    }\\n\\n    function withdrawCollateral(uint256 amount) public {\\n        totalCollateral -= amount;\\n        userCollateral[msg.sender] -= amount;\\n        require(accountHealth(msg.sender) >= 1e18, \\\"Account not healthy after withdraw\\\");\\n    }\\n\\n    function lend(address token, uint256 amount) external {\\n        ILNXReward(lnxReward).claimRewards(msg.sender);\\n        uint transferAmount = amount;\\n        amount = amount.mul(10**(decimalMultiplier[token]));\\n        require(borrowToken[token] == true, \\\"Token not allowed\\\");\\n        uint amountToMint = amount.mul(1e18).div(getShareValue(token));\\n        tokenDebt[token] += getTokenAccruedInterest(token);\\n        interestCheckpoint[token] = block.timestamp;\\n        IERC20(token).transferFrom(msg.sender, address(this), transferAmount);\\n        IERC20(borrowShare[token]).mint(msg.sender, amountToMint);\\n        borrowTokenBalance[token] += amount;\\n    }\\n\\n    function withdrawAll(address token) external {\\n        uint shareAmount = IERC20(borrowShare[token]).balanceOf(msg.sender);\\n        withdraw(token, shareAmount);\\n    }\\n\\n    function withdraw(address token, uint256 shareAmount) public {\\n        ILNXReward(lnxReward).claimRewards(msg.sender);\\n        uint amountToSend = shareAmount.mul(getShareValue(token)).div(1e18);\\n        require(amountToSend > IERC20(token).balanceOf(address(this)).mul(10**decimalMultiplier[token]), \\\"Too much borrowed from liquidity to withdraw\\\");\\n        IERC20(borrowShare[token]).burn(msg.sender, shareAmount);\\n        borrowTokenBalance[token] -= amountToSend;\\n        tokenDebt[token] += getTokenAccruedInterest(token);\\n        interestCheckpoint[token] = block.timestamp;        \\n        IERC20(token).transfer(msg.sender, amountToSend.div(10**decimalMultiplier[token]));\\n    }\\n\\n    function borrow(address token, uint256 tokenAmount) external {\\n        require(borrowingPower(msg.sender, token) >= tokenAmount.mul(10**decimalMultiplier[token]), \\\"Not enough borrowing power\\\");\\n        tokenDebt[token] += getTokenAccruedInterest(token);\\n        interestCheckpoint[token] = block.timestamp;\\n        borrowedAmount[msg.sender][token] += tokenAmount.mul(uint(1e18).mul(10**decimalMultiplier[token])).div(debtValue(token));\\n        initialBorrowedAmount[msg.sender][token] += tokenAmount.mul(10**decimalMultiplier[token]);\\n        initialLentAmount[token] += tokenAmount.mul(10**decimalMultiplier[token]);\\n        tokenDebt[token] += tokenAmount.mul(10**decimalMultiplier[token]); \\n        IERC20(token).transfer(msg.sender, tokenAmount);\\n    }\\n\\n    function repay(address token, uint256 tokenAmount) public {\\n        tokenAmount = tokenAmount.mul(10**decimalMultiplier[token]);\\n        uint interest = userDebt(msg.sender, token).sub(initialBorrowedAmount[msg.sender][token]);\\n        uint interestPaid;\\n        if (tokenAmount >= interest) {\\n            interestPaid = interest;\\n        }\\n        else {\\n            interestPaid = tokenAmount;\\n        }\\n        require(tokenAmount <= userDebt(msg.sender, token), \\\"Repaying too much\\\");\\n        tokenDebt[token] += getTokenAccruedInterest(token);\\n        interestCheckpoint[token] = block.timestamp;\\n        borrowedAmount[msg.sender][token] -= tokenAmount.mul(1e18).div(debtValue(token));\\n        initialBorrowedAmount[msg.sender][token] -= tokenAmount.sub(interestPaid);\\n        initialLentAmount[token] -= tokenAmount.sub(interestPaid);\\n        tokenDebt[token] -= tokenAmount;\\n        IERC20(token).transferFrom(msg.sender, address(this), tokenAmount.div(10**decimalMultiplier[token]));\\n        IStakeReward(stakeReward).receiveRewards(token, interestPaid.div(4).div(10**decimalMultiplier[token]));\\n        borrowTokenBalance[token] += interestPaid.mul(3).div(4);\\n    }\\n\\n    function repayAll(address token) external {\\n        repay(token, userDebt(msg.sender, token).div(10**decimalMultiplier[token]));\\n    }\\n\\n    function liquidate(address account) external {\\n        require(accountHealth(account) < 1e18, \\\"Account healthy\\\");\\n        uint256 amount = userCollateral[account];\\n        userCollateral[account] = 0;\\n        totalPendingLiquidationWGLP = totalPendingLiquidationWGLP.add(amount.mul(9).div(10));\\n        totalCollateral = totalCollateral.sub(amount);\\n        WGLP.transfer(msg.sender, amount.mul(5).div(100));\\n        IStakeReward(stakeReward).receiveRewards(address(WGLP), amount.mul(5).div(100));\\n        address token;\\n        uint tokenDebtAmountUSD;\\n        uint tokenDebtAmount;\\n        uint allWhitelistedTokensLength = vault.allWhitelistedTokensLength();\\n        uint amountWithdrawn;\\n        for(uint i=0; i<allWhitelistedTokensLength; i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            tokenDebt[token] = tokenDebt[token].add(getTokenAccruedInterest(token));\\n            interestCheckpoint[token] = block.timestamp;\\n            tokenDebtAmountUSD = userDebtUSD(account, token);\\n            tokenDebtAmount = userDebt(account, token);\\n            if(tokenDebtAmountUSD > 0) {\\n                tokenDebt[token] = tokenDebt[token].sub(tokenDebtAmount);\\n                initialLentAmount[token] = initialLentAmount[token].sub(tokenDebtAmount);\\n                borrowedAmount[account][token] = 0;\\n                initialBorrowedAmount[account][token] = 0;\\n                tokenPendingLiquidationUSD[token] = tokenPendingLiquidationUSD[token].add(tokenDebtAmountUSD);\\n                totalPendingLiquidationUSD = totalPendingLiquidationUSD.add(tokenDebtAmountUSD);\\n            }\\n        }\\n        if(WGLPManager.canWithdraw() == true) {\\n            for(uint j=0; j<allWhitelistedTokensLength; j++) {\\n                token = vault.allWhitelistedTokens(j);\\n                if(tokenPendingLiquidationUSD[token] > 0) {\\n                    amountWithdrawn = WGLPManager.withdraw(token, totalPendingLiquidationWGLP.mul(tokenPendingLiquidationUSD[token]).div(totalPendingLiquidationUSD));\\n                    borrowTokenBalance[token] = borrowTokenBalance[token].add(amountWithdrawn.mul(10**decimalMultiplier[token]));\\n                    tokenPendingLiquidationUSD[token] = 0;\\n                }\\n            }\\n            totalPendingLiquidationUSD = 0;\\n            totalPendingLiquidationWGLP = 0;\\n        }\\n    }\\n\\n\\n\\n    // Governance functions\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!Governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setBorrowToken(address token, address share) external {\\n        require(msg.sender == governance, \\\"!Governance\\\");\\n        require(borrowShare[token] == address(0), \\\"!Governance\\\");\\n        borrowShare[token] = share;\\n        borrowToken[token] = true;\\n        decimalMultiplier[token] = uint(18).sub(IERC20(token).decimals());\\n        IERC20(token).approve(GLPManager, type(uint).max);\\n        IERC20(token).approve(stakeReward, type(uint).max);\\n    }\\n\\n    function setBorrowTokenAllowed(address token, bool allowed) external {\\n        require(msg.sender == governance, \\\"!Governance\\\");\\n        borrowToken[token] = allowed;\\n    }\\n\\n    function setltv(uint _ltv) external {\\n        require(msg.sender == governance, \\\"!Governance\\\");\\n        require(_ltv <= 90 && _ltv >= 50, \\\"Invalid LTV\\\"); // Decreasing LTV can cause unfair liquidations, careful\\n        ltv = _ltv;\\n    }\\n\\n    function setWGLP(address _WGLP) external {\\n        require(msg.sender == governance, \\\"!Governance\\\");\\n        require(address(WGLP) == address(0), \\\"WGLP already set!\\\");\\n        WGLP = IERC20(_WGLP);\\n        WGLP.approve(stakeReward, type(uint).max);\\n        WGLP.approve(address(WGLPManager), type(uint).max);\\n    }\\n\\n    function setWGLPManager(address _WGLPManager) external {\\n        require(msg.sender == governance);\\n        require(address(WGLPManager) == address(0));\\n        WGLPManager = IWGLPManager(_WGLPManager);\\n    }\\n\\n    function rescueExcess(address token) external { // Used to rescue tokens sent to this contract without a purpose\\n        require(msg.sender == governance);\\n        require(token != address(WGLP));\\n        uint amount = (IERC20(token).balanceOf(address(this))).sub(borrowTokenBalance[token].sub(initialLentAmount[token]));\\n        require(amount > 0, \\\"Nothing to rescue\\\");\\n        IERC20(token).transfer(governance, amount);\\n    }\\n\\n\\n\\n    // View functions\\n\\n    // Value of a debt \\\"token\\\"\\n    function debtValue(address token) public view returns (uint256) { // 1e18 precision\\n        if (totalBorrowedAmount(token) == 0) return 1e18;\\n        return (tokenDebt[token].add(getTokenAccruedInterest(token))).mul(1e18).div(totalBorrowedAmount(token));\\n    }\\n\\n    // Tokens owed in total\\n    function totalTokenDebt(address token) public view returns (uint256) { // 1e18 precision\\n        return tokenDebt[token].add(getTokenAccruedInterest(token));\\n    }\\n\\n    // Interest on token since last checkpoint\\n    function getTokenAccruedInterest(address token) public view returns (uint256) { // 1e18 precision\\n        uint secondsBorrowed = block.timestamp.sub(interestCheckpoint[token]);\\n        uint interest = tokenDebt[token].mul(interestRate(token)).mul(secondsBorrowed).div(1e18).div(31536000); // 31536000 seconds in a year\\n        return interest;\\n    }\\n\\n    // How many tokens does an user owe\\n    function userDebt(address account, address token) public view returns (uint256) {\\n        return borrowedAmount[account][token].mul(debtValue(token)).div(1e18);\\n    }\\n\\n    // How much USD does an user owe per token\\n    function userDebtUSD(address account, address token) public view returns (uint256) {\\n        return userDebt(account, token).mul(getLatestPrice(token)).div(1e18);\\n    }\\n\\n    // How many lent tokens is it's share token backed by\\n    function getShareValue(address token) public view returns (uint256) {\\n        if (IERC20(borrowShare[token]).totalSupply() == 0) return 1e18;\\n        return borrowTokenBalance[token].mul(1e18).div(IERC20(borrowShare[token]).totalSupply());\\n    }\\n\\n    // How many collateral tokens is it's share token backed by\\n    function getCollateralShareValue() public view returns(uint256) { // 1e18 precision\\n        return WGLPManager.getShareValue();\\n    }\\n\\n    // Fetch the price of an asset from GMX price feed contract\\n    function getLatestPrice(address token) private view returns (uint) {\\n        uint price = priceFeed.getPrice(token, false, true, false);\\n        return price.div(1e12); // Normalize to 1e18\\n    }\\n\\n    // Price of GLP\\n    function getCollateralPrice() public view returns (uint) { // 1e18 precision\\n        return IGLPManager(GLPManager).getAumInUsdg(true).mul(1e18).div(IERC20(GLP).totalSupply());\\n    }\\n\\n    // User's health factor\\n    function accountHealth(address account) public view returns (uint256) { // 1e18 precision\\n        if (accountBorrowedValue(account) == 0) return 100e18;\\n        if (accountCollateralValue(account).mul(1e18).div(accountBorrowedValue(account)) > 100e18) return 100e18;\\n        return accountCollateralValue(account).mul(1e18).div(accountBorrowedValue(account));\\n    }\\n\\n    // How much an user has borrowed in total in USD\\n    function accountBorrowedValue(address account) public view returns (uint256) { // 1e18 precision\\n        uint totalBorrowedValue;\\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            totalBorrowedValue += userDebt(account, vault.allWhitelistedTokens(i)).mul(getLatestPrice(vault.allWhitelistedTokens(i))).div(1e18);\\n        }  \\n        return totalBorrowedValue;      \\n    }\\n\\n    // How much an user has lent in total in USD\\n    function accountLentValue(address account) public view returns (uint256) { // 1e18 precision\\n        uint accountValue;\\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            address token = vault.allWhitelistedTokens(i);\\n            accountValue += borrowTokenBalance[token]\\n            .mul(IERC20(borrowShare[token]).balanceOf(account))\\n            .mul(getShareValue(token))\\n            .mul(getLatestPrice(token))\\n            .div(1e54);\\n        }  \\n        return accountValue;      \\n    }\\n\\n    // How much is lent in total in USD\\n    function totalLentValue() public view returns (uint256) { // 1e18 precision\\n        uint total;\\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            address token = vault.allWhitelistedTokens(i);\\n            total += borrowTokenBalance[token]\\n            .mul(getLatestPrice(token))\\n            .div(1e18);\\n        }  \\n        return total;      \\n    }\\n\\n    // Value of an user's collateral in USD\\n    function accountCollateralValue(address account) public view returns (uint256) { // 1e18 precision\\n        uint totalCollateralValue = userCollateral[account].mul(getCollateralShareValue()).mul(getCollateralPrice()).mul(ltv).div(1e36).div(100);\\n        return totalCollateralValue;\\n    }\\n\\n    // Annual interest rate of borrowing a token\\n    function interestRate(address token) public view returns (uint256) { // 1e18 precision, %annual\\n        return totalBorrowedAmount(token).mul(1e18).div(borrowTokenBalance[token]);\\n    }\\n\\n    // How many tokens have been borrowed from liquidity\\n    function totalBorrowedAmount(address token) public view returns (uint256) {\\n        return initialLentAmount[token];\\n    }\\n\\n    // How many tokens can an user borrow\\n    function borrowingPower(address account, address token) public view returns (uint256) {\\n        if (accountBorrowedValue(account) > accountCollateralValue(account)) return 0;\\n        return (accountCollateralValue(account).sub(accountBorrowedValue(account))).mul(1e18).div(getLatestPrice(token));\\n    }\\n\\n    // How much can an user borrow in USD\\n    function borrowingPowerUSD(address account) public view returns (uint256) {\\n        if (accountBorrowedValue(account) > accountCollateralValue(account)) return 0;\\n        return accountCollateralValue(account).sub(accountBorrowedValue(account));\\n    }\\n}\",\"keccak256\":\"0xae402e925d0cc5d9db811b37c681fb2fba6442e61a9cfafe5eaf60b2b2e3631d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103a35760003560e01c80637c2c69c0116101e9578063c3e2566d1161010f578063f3e1abe1116100ad578063f9c019d51161007c578063f9c019d51461088a578063fa09e6301461089d578063fbfa77cf146108b0578063ffdbfbae146108c357600080fd5b8063f3e1abe11461082f578063f3fef3a31461084f578063f69f1e4a14610862578063f7683bbc1461088257600080fd5b8063d196943c116100e9578063d196943c146107ec578063e152c34a146107f4578063e68802e314610807578063f18ea6d81461080f57600080fd5b8063c3e2566d14610786578063c9f005af146107a6578063cc4c336b146107b957600080fd5b806397ea860511610187578063b28147d911610156578063b28147d914610745578063b9637e4914610758578063bad4a01f1461076b578063c09f66aa1461077e57600080fd5b806397ea8605146106f9578063983ff6151461070c578063a2fb342d1461071f578063ab033ea91461073257600080fd5b806389e02a58116101c357806389e02a58146106a05780638b96b280146106b35780638f2b6270146106c657806394e1de58146106d957600080fd5b80637c2c69c01461066757806387c884b31461067a57806388d595db1461068d57600080fd5b80635aa6e675116102ce5780636fb49d731161026c578063770089f11161023b578063770089f1146105f85780637a8f4605146106185780637a978fcd146106415780637c27383b1461065457600080fd5b80636fb49d7314610591578063726654381461059a578063741bef1a146105c55780637558abc8146105d857600080fd5b80636112fe2e116102a85780636112fe2e1461054f578063690d6a14146105625780636ac9ce6c146105755780636d6b57b41461058857600080fd5b80635aa6e675146105165780635bf12feb146105295780635bf2d5ef1461053c57600080fd5b80632c0cf90c116103465780634414e1af116103155780634414e1af146104d4578063474fefaa146104e75780634ac8eb5f146104fa5780634b8a35291461050357600080fd5b80632c0cf90c1461045a5780632c9cbca2146104855780632f865568146104ae5780633fc8cef3146104c157600080fd5b806322867d781161038257806322867d781461040e57806323e7d6501461042157806323eafe1e1461043457806329147fab1461044757600080fd5b80623aadee146103a857806314c8ad2c146103bd57806314f47dcc146103e3575b600080fd5b6103bb6103b6366004613121565b6108cc565b005b6103d06103cb36600461315a565b610944565b6040519081526020015b60405180910390f35b6016546103f6906001600160a01b031681565b6040516001600160a01b0390911681526020016103da565b6103bb61041c366004613188565b610999565b6019546103f6906001600160a01b031681565b6103d061044236600461315a565b610d5f565b6103bb6104553660046131b4565b610d89565b6103d061046836600461315a565b600760209081526000928352604080842090915290825290205481565b6103f66104933660046131b4565b6001602052600090815260409020546001600160a01b031681565b6103bb6104bc3660046131b4565b610f41565b6013546103f6906001600160a01b031681565b6103d06104e23660046131b4565b6115c9565b6103bb6104f536600461315a565b6117b9565b6103d060095481565b6103bb610511366004613188565b611a32565b600e546103f6906001600160a01b031681565b6018546103f6906001600160a01b031681565b6011546103f6906001600160a01b031681565b6103bb61055d3660046131d1565b611cbf565b6103d06105703660046131b4565b611d84565b6103d06105833660046131b4565b611db1565b6103d0600c5481565b6103d060145481565b6103d06105a836600461315a565b600660209081526000928352604080842090915290825290205481565b6017546103f6906001600160a01b031681565b6103d06105e63660046131b4565b60056020526000908152604090205481565b6103d06106063660046131b4565b60026020526000908152604090205481565b6103d06106263660046131b4565b6001600160a01b031660009081526003602052604090205490565b6103bb61064f3660046131b4565b611f4e565b6103bb6106623660046131b4565b611faa565b6103d06106753660046131b4565b611fe2565b6103bb6106883660046131b4565b61201e565b6103bb61069b3660046131d1565b612175565b6015546103f6906001600160a01b031681565b6103d06106c13660046131b4565b612220565b6103d06106d43660046131b4565b61229d565b6103d06106e73660046131b4565b60036020526000908152604090205481565b6103d06107073660046131b4565b6122fa565b6103d061071a3660046131b4565b61236f565b6103bb61072d366004613188565b6123a6565b6103bb6107403660046131b4565b612626565b6012546103f6906001600160a01b031681565b6103d06107663660046131b4565b61269d565b6103bb6107793660046131d1565b612703565b6103bb6127bf565b6103d06107943660046131b4565b600d6020526000908152604090205481565b6103d06107b436600461315a565b61282e565b6107dc6107c73660046131b4565b60006020819052908152604090205460ff1681565b60405190151581526020016103da565b6103d061287d565b6010546103f6906001600160a01b031681565b6103d06129ce565b6103d061081d3660046131b4565b60046020526000908152604090205481565b6103d061083d3660046131b4565b60086020526000908152604090205481565b6103bb61085d366004613188565b612a5a565b6103d06108703660046131b4565b600a6020526000908152604090205481565b6103d0612d89565b6103d06108983660046131b4565b612e5d565b6103bb6108ab3660046131b4565b612f96565b600f546103f6906001600160a01b031681565b6103d0600b5481565b600e546001600160a01b031633146109195760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b60448201526064015b60405180910390fd5b6001600160a01b03919091166000908152602081905260409020805460ff1916911515919091179055565b6000610990670de0b6b3a764000061098a61095e8561269d565b6001600160a01b038088166000908152600660209081526040808320938a16835292905220549061301d565b90613029565b90505b92915050565b6001600160a01b0382166000908152600460205260409020546109c8906109c190600a6132e4565b829061301d565b3360008181526007602090815260408083206001600160a01b038816845290915281205492935091610a04916109fe9086610944565b90613035565b90506000818310610a16575080610a19565b50815b610a233385610944565b831115610a725760405162461bcd60e51b815260206004820152601160248201527f5265706179696e6720746f6f206d7563680000000000000000000000000000006044820152606401610910565b610a7b846122fa565b6001600160a01b03851660009081526005602052604081208054909190610aa39084906132f0565b90915550506001600160a01b0384166000908152600860205260409020429055610ae1610acf8561269d565b61098a85670de0b6b3a764000061301d565b3360009081526006602090815260408083206001600160a01b038916845290915281208054909190610b14908490613308565b90915550610b2490508382613035565b3360009081526007602090815260408083206001600160a01b038916845290915281208054909190610b57908490613308565b90915550610b6790508382613035565b6001600160a01b03851660009081526003602052604081208054909190610b8f908490613308565b90915550506001600160a01b03841660009081526005602052604081208054859290610bbc908490613308565b90915550506001600160a01b0384166000818152600460205260409020546323b872dd9033903090610bfa90610bf390600a6132e4565b8890613029565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064016020604051808303816000875af1158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c72919061331f565b506016546001600160a01b03858116600090815260046020526040902054911690639aa49864908690610cb590610caa90600a6132e4565b61098a866004613029565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b50505050610d2c600461098a60038461301d90919063ffffffff16565b6001600160a01b03851660009081526002602052604081208054909190610d549084906132f0565b909155505050505050565b6000610990670de0b6b3a764000061098a610d7985613041565b610d838787610944565b9061301d565b600e546001600160a01b03163314610dd15760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b6044820152606401610910565b6011546001600160a01b031615610e2a5760405162461bcd60e51b815260206004820152601160248201527f57474c5020616c726561647920736574210000000000000000000000000000006044820152606401610910565b6011805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560165460405163095ea7b360e01b81529216600483015260001960248301529063095ea7b3906044016020604051808303816000875af1158015610e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec2919061331f565b5060115460195460405163095ea7b360e01b81526001600160a01b039182166004820152600019602482015291169063095ea7b3906044016020604051808303816000875af1158015610f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f3d919061331f565b5050565b670de0b6b3a7640000610f5382612220565b10610fa05760405162461bcd60e51b815260206004820152600f60248201527f4163636f756e74206865616c74687900000000000000000000000000000000006044820152606401610910565b6001600160a01b0381166000908152600a6020819052604082208054929055610fdb90610fd29061098a84600961301d565b600c54906130f2565b600c55600954610feb9082613035565b6009556011546001600160a01b031663a9059cbb33611010606461098a86600561301d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af115801561105b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107f919061331f565b506016546011546001600160a01b0391821691639aa4986491166110a9606461098a86600561301d565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b1580156110ef57600080fd5b505af1158015611103573d6000803e3d6000fd5b50505050600080600080600f60009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611184919061333c565b90506000805b8281101561135d57600f54604051630e468baf60e41b8152600481018390526001600160a01b039091169063e468baf090602401602060405180830381865afa1580156111db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ff9190613355565b955061122c61120d876122fa565b6001600160a01b038816600090815260056020526040902054906130f2565b6001600160a01b038716600090815260056020908152604080832093909355600890522042905561125d8887610d5f565b94506112698887610944565b9350841561134b576001600160a01b0386166000908152600560205260409020546112949085613035565b6001600160a01b0387166000908152600560209081526040808320939093556003905220546112c39085613035565b6001600160a01b03808816600081815260036020908152604080832095909555928c16808252600684528482208383528452848220829055815260078352838120918152908252828120819055600d909152205461132190866130f2565b6001600160a01b0387166000908152600d6020526040902055600b5461134790866130f2565b600b555b8061135581613372565b91505061118a565b50601960009054906101000a90046001600160a01b03166001600160a01b031663b51459fe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d5919061331f565b1515600114156115c05760005b828110156115b457600f54604051630e468baf60e41b8152600481018390526001600160a01b039091169063e468baf090602401602060405180830381865afa158015611433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114579190613355565b6001600160a01b0381166000908152600d6020526040902054909650156115a257601954600b546001600160a01b038881166000908152600d6020526040902054600c54919093169263f3fef3a3928a926114b69261098a919061301d565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015611501573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611525919061333c565b6001600160a01b03871660009081526004602052604090205490925061157a9061155b9061155490600a6132e4565b849061301d565b6001600160a01b038816600090815260026020526040902054906130f2565b6001600160a01b038716600090815260026020908152604080832093909355600d9052908120555b806115ac81613372565b9150506113e2565b506000600b819055600c555b50505050505050565b60008060005b600f60009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611622573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611646919061333c565b8110156117b257600f54604051630e468baf60e41b8152600481018390526000916001600160a01b03169063e468baf090602401602060405180830381865afa158015611697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bb9190613355565b9050611792760a70c3c40a64e6c51999090b65f67d924000000000000061098a6116e484613041565b610d836116f086612e5d565b6001600160a01b03878116600090815260016020526040908190205490516370a0823160e01b81528d83166004820152610d839291909116906370a0823190602401602060405180830381865afa15801561174f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611773919061333c565b6001600160a01b0389166000908152600260205260409020549061301d565b61179c90846132f0565b92505080806117aa90613372565b9150506115cf565b5092915050565b600e546001600160a01b031633146118015760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b6044820152606401610910565b6001600160a01b0382811660009081526001602052604090205416156118575760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b6044820152606401610910565b6001600160a01b038281166000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff19169688169690961790955582815291849020805460ff1916909117905582517f313ce56700000000000000000000000000000000000000000000000000000000815292516119269363313ce5679260048083019391928290030181865afa1580156118fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191e919061333c565b601290613035565b6001600160a01b0383811660008181526004602081905260409182902094909455601854905163095ea7b360e01b8152921692820192909252600019602482015263095ea7b3906044016020604051808303816000875af115801561198f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b3919061331f565b5060165460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529083169063095ea7b3906044015b6020604051808303816000875af1158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d919061331f565b505050565b6001600160a01b038216600090815260046020526040902054611a5a906109c190600a6132e4565b611a64338461282e565b1015611ab25760405162461bcd60e51b815260206004820152601a60248201527f4e6f7420656e6f75676820626f72726f77696e6720706f7765720000000000006044820152606401610910565b611abb826122fa565b6001600160a01b03831660009081526005602052604081208054909190611ae39084906132f0565b90915550506001600160a01b0382166000908152600860205260409020429055611b4a611b0f8361269d565b6001600160a01b03841660009081526004602052604090205461098a9061155490611b3b90600a6132e4565b670de0b6b3a76400009061301d565b3360009081526006602090815260408083206001600160a01b038716845290915281208054909190611b7d9084906132f0565b90915550506001600160a01b038216600090815260046020526040902054611baa906109c190600a6132e4565b3360009081526007602090815260408083206001600160a01b038716845290915281208054909190611bdd9084906132f0565b90915550506001600160a01b038216600090815260046020526040902054611c0a906109c190600a6132e4565b6001600160a01b03831660009081526003602052604081208054909190611c329084906132f0565b90915550506001600160a01b038216600090815260046020526040902054611c5f906109c190600a6132e4565b6001600160a01b03831660009081526005602052604081208054909190611c879084906132f0565b909155505060405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016119ea565b8060096000828254611cd19190613308565b9091555050336000908152600a602052604081208054839290611cf5908490613308565b90915550670de0b6b3a76400009050611d0d33612220565b1015611d815760405162461bcd60e51b815260206004820152602260248201527f4163636f756e74206e6f74206865616c7468792061667465722077697468647260448201527f61770000000000000000000000000000000000000000000000000000000000006064820152608401610910565b50565b6000610993611d92836122fa565b6001600160a01b038416600090815260056020526040902054906130f2565b60008060005b600f60009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2e919061333c565b8110156117b257600f54604051630e468baf60e41b815260048101839052611f3091670de0b6b3a76400009161098a91611ebd916001600160a01b039091169063e468baf090602401602060405180830381865afa158015611e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb89190613355565b613041565b600f54604051630e468baf60e41b815260048101879052610d83918a916001600160a01b039091169063e468baf090602401602060405180830381865afa158015611f0c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190613355565b611f3a90836132f0565b915080611f4681613372565b915050611db7565b600e546001600160a01b03163314611f6557600080fd5b6019546001600160a01b031615611f7b57600080fd5b6019805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038116600090815260046020526040902054611d8190829061041c90611fd890600a6132e4565b61098a3386610944565b6001600160a01b0381166000908152600260209081526040808320546003909252822054610993919061098a90670de0b6b3a764000090610d83565b600e546001600160a01b0316331461203557600080fd5b6011546001600160a01b038281169116141561205057600080fd5b6001600160a01b03811660009081526003602090815260408083205460029092528220546120ea916120829190613035565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a0823190602401602060405180830381865afa1580156120c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe919061333c565b90506000811161213c5760405162461bcd60e51b815260206004820152601160248201527f4e6f7468696e6720746f207265736375650000000000000000000000000000006044820152606401610910565b600e5460405163a9059cbb60e01b81526001600160a01b039182166004820152602481018390529083169063a9059cbb906044016119ea565b600e546001600160a01b031633146121bd5760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b6044820152606401610910565b605a81111580156121cf575060328110155b61221b5760405162461bcd60e51b815260206004820152600b60248201527f496e76616c6964204c54560000000000000000000000000000000000000000006044820152606401610910565b601455565b600061222b82611db1565b61223f575068056bc75e2d63100000919050565b68056bc75e2d6310000061226a61225584611db1565b61098a670de0b6b3a7640000610d838761229d565b1115612280575068056bc75e2d63100000919050565b61099361228c83611db1565b61098a670de0b6b3a7640000610d83865b6000806122f3606461098a6ec097ce7bc90715b34b9f100000000061098a601454610d836122c9612d89565b610d836122d46129ce565b6001600160a01b038d166000908152600a60205260409020549061301d565b9392505050565b6001600160a01b0381166000908152600860205260408120548190612320904290613035565b905060006123676301e1338061098a670de0b6b3a764000061098a86610d836123488b611fe2565b6001600160a01b038c166000908152600560205260409020549061301d565b949350505050565b600061237a8261229d565b61238383611db1565b111561239157506000919050565b61099361239d83611db1565b6109fe8461229d565b601554604051633bd73ee360e21b81523360048201526001600160a01b039091169063ef5cfb8c90602401600060405180830381600087803b1580156123eb57600080fd5b505af11580156123ff573d6000803e3d6000fd5b5050506001600160a01b0383166000908152600460205260409020548291506124349061242d90600a6132e4565b839061301d565b6001600160a01b03841660009081526020819052604090205490925060ff1615156001146124a45760405162461bcd60e51b815260206004820152601160248201527f546f6b656e206e6f7420616c6c6f7765640000000000000000000000000000006044820152606401610910565b60006124b2610acf85612e5d565b90506124bd846122fa565b6001600160a01b038516600090815260056020526040812080549091906124e59084906132f0565b90915550506001600160a01b03841660008181526008602052604090819020429055516323b872dd60e01b8152336004820152306024820152604481018490526323b872dd906064016020604051808303816000875af115801561254d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612571919061331f565b506001600160a01b03848116600090815260016020526040908190205490517f40c10f19000000000000000000000000000000000000000000000000000000008152336004820152602481018490529116906340c10f1990604401600060405180830381600087803b1580156125e657600080fd5b505af11580156125fa573d6000803e3d6000fd5b505050506001600160a01b03841660009081526002602052604081208054859290610d549084906132f0565b600e546001600160a01b0316331461266e5760405162461bcd60e51b815260206004820152600b60248201526a21476f7665726e616e636560a81b6044820152606401610910565b600e805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600360205260408120546126c95750670de0b6b3a7640000919050565b6109936126eb836001600160a01b031660009081526003602052604090205490565b61098a670de0b6b3a7640000610d8361120d876122fa565b6011546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af115801561275a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277e919061331f565b50336000908152600a60205260408120805483929061279e9084906132f0565b9250508190555080600960008282546127b791906132f0565b909155505050565b6127c833611db1565b156128155760405162461bcd60e51b815260206004820152601060248201527f4163636f756e74206861732064656274000000000000000000000000000000006044820152606401610910565b336000908152600a6020526040902054611d8181611cbf565b60006128398361229d565b61284284611db1565b111561285057506000610993565b61099061285c83613041565b61098a670de0b6b3a7640000610d8361287488611db1565b6109fe8961229d565b60008060005b600f60009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128fa919061333c565b8110156129c857600f54604051630e468baf60e41b8152600481018390526000916001600160a01b03169063e468baf090602401602060405180830381865afa15801561294b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296f9190613355565b90506129a8670de0b6b3a764000061098a61298984613041565b6001600160a01b0385166000908152600260205260409020549061301d565b6129b290846132f0565b92505080806129c090613372565b915050612883565b50919050565b601954604080517f437c328900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163437c32899160048083019260209291908290030181865afa158015612a31573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a55919061333c565b905090565b601554604051633bd73ee360e21b81523360048201526001600160a01b039091169063ef5cfb8c90602401600060405180830381600087803b158015612a9f57600080fd5b505af1158015612ab3573d6000803e3d6000fd5b505050506000612ad8670de0b6b3a764000061098a612ad186612e5d565b859061301d565b6001600160a01b038416600090815260046020526040902054909150612b6c90612b0390600a6132e4565b6040516370a0823160e01b81523060048201526001600160a01b038616906370a08231906024015b602060405180830381865afa158015612b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d83919061333c565b8111612be05760405162461bcd60e51b815260206004820152602c60248201527f546f6f206d75636820626f72726f7765642066726f6d206c697175696469747960448201527f20746f20776974686472617700000000000000000000000000000000000000006064820152608401610910565b6001600160a01b03838116600090815260016020526040908190205490517f9dc29fac00000000000000000000000000000000000000000000000000000000815233600482015260248101859052911690639dc29fac90604401600060405180830381600087803b158015612c5457600080fd5b505af1158015612c68573d6000803e3d6000fd5b505050506001600160a01b03831660009081526002602052604081208054839290612c94908490613308565b90915550612ca39050836122fa565b6001600160a01b03841660009081526005602052604081208054909190612ccb9084906132f0565b90915550506001600160a01b0383166000818152600860209081526040808320429055600490915290205463a9059cbb903390612d1490612d0d90600a6132e4565b8590613029565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015612d5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d83919061331f565b50505050565b6000612a55601260009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e05919061333c565b6018546040517f68a0a3e00000000000000000000000000000000000000000000000000000000081526001600482015261098a91670de0b6b3a7640000916001600160a01b03909116906368a0a3e090602401612b2b565b6001600160a01b0380821660009081526001602090815260408083205481516318160ddd60e01b81529151939416926318160ddd926004808401939192918290030181865afa158015612eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed8919061333c565b612eeb5750670de0b6b3a7640000919050565b6001600160a01b038083166000908152600160209081526040918290205482516318160ddd60e01b815292516109939491909116926318160ddd9260048083019391928290030181865afa158015612f47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6b919061333c565b6001600160a01b03841660009081526002602052604090205461098a90670de0b6b3a764000061301d565b6001600160a01b038181166000908152600160205260408082205490516370a0823160e01b8152336004820152919216906370a0823190602401602060405180830381865afa158015612fed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613011919061333c565b9050610f3d8282612a5a565b6000610990828461338d565b600061099082846133ac565b60006109908284613308565b6017546040517f2fc3a70a0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526000602483018190526001604484015260648301819052928392911690632fc3a70a90608401602060405180830381865afa1580156130bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e1919061333c565b90506122f38164e8d4a51000613029565b600061099082846132f0565b6001600160a01b0381168114611d8157600080fd5b8015158114611d8157600080fd5b6000806040838503121561313457600080fd5b823561313f816130fe565b9150602083013561314f81613113565b809150509250929050565b6000806040838503121561316d57600080fd5b8235613178816130fe565b9150602083013561314f816130fe565b6000806040838503121561319b57600080fd5b82356131a6816130fe565b946020939093013593505050565b6000602082840312156131c657600080fd5b81356122f3816130fe565b6000602082840312156131e357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561323b578160001904821115613221576132216131ea565b8085161561322e57918102915b93841c9390800290613205565b509250929050565b60008261325257506001610993565b8161325f57506000610993565b8160018114613275576002811461327f5761329b565b6001915050610993565b60ff841115613290576132906131ea565b50506001821b610993565b5060208310610133831016604e8410600b84101617156132be575081810a610993565b6132c88383613200565b80600019048211156132dc576132dc6131ea565b029392505050565b60006109908383613243565b60008219821115613303576133036131ea565b500190565b60008282101561331a5761331a6131ea565b500390565b60006020828403121561333157600080fd5b81516122f381613113565b60006020828403121561334e57600080fd5b5051919050565b60006020828403121561336757600080fd5b81516122f3816130fe565b6000600019821415613386576133866131ea565b5060010190565b60008160001904831182151516156133a7576133a76131ea565b500290565b6000826133c957634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220da6abbf7256d1128b0e28436250b333eaee9d483a72c56a11087ccff1a63880464736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1025,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "borrowToken",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1029,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "borrowShare",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1033,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "borrowTokenBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1037,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "initialLentAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1041,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "decimalMultiplier",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1045,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "tokenDebt",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1051,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "borrowedAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1057,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "initialBorrowedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1061,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "interestCheckpoint",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1063,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "totalCollateral",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1067,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "userCollateral",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1069,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "totalPendingLiquidationUSD",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1071,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "totalPendingLiquidationWGLP",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1075,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "tokenPendingLiquidationUSD",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1077,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "governance",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 1080,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "vault",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IVault)915"
      },
      {
        "astId": 1083,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "rewardsRouter",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IRewardsRouter)973"
      },
      {
        "astId": 1086,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "WGLP",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(IERC20)902"
      },
      {
        "astId": 1089,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "GLP",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(IERC20)902"
      },
      {
        "astId": 1091,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "weth",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 1094,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "ltv",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 1096,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "lnxReward",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 1098,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "stakeReward",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 1101,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "priceFeed",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IPriceFeed)929"
      },
      {
        "astId": 1103,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "GLPManager",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 1106,
        "contract": "contracts/Protocol.sol:Protocol",
        "label": "WGLPManager",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IWGLPManager)1018"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)902": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)929": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsRouter)973": {
        "encoding": "inplace",
        "label": "contract IRewardsRouter",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)915": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_contract(IWGLPManager)1018": {
        "encoding": "inplace",
        "label": "contract IWGLPManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}