{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lnx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WGLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLP",
          "type": "address"
        }
      ],
      "name": "setWGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensRewarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x946988a3bbb5856f41dcda0c2d8a2a68a3211d2e8ef04e4b2484db7460ef6de9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "760837",
    "logsBloom": "0x
    "blockHash": "0x7806e07f6f853e396046dae94b1f1b01610765d76b3699730a12d700b729fa35",
    "transactionHash": "0x946988a3bbb5856f41dcda0c2d8a2a68a3211d2e8ef04e4b2484db7460ef6de9",
    "logs": [],
    "blockNumber": 4407445,
    "cumulativeGasUsed": "760837",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A"
  ],
  "solcInputHash": "1e9ca5e654e202500e8458b7cff1e5eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WGLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLP\",\"type\":\"address\"}],\"name\":\"setWGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeRewards.sol\":\"StakeRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/StakeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ncontract StakeRewards {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public lnx; // Governance token\\n    address public protocol; // Lending protocol\\n    address public WGLP;\\n    IVault public vault;\\n    address public governance;\\n    mapping(address => uint) public userStaked; // How much LNX has an user staked\\n    uint public totalStaked; // LNX staked in total\\n    mapping(address => mapping(address => uint)) public userClaimed; // How many tokens has an user claimed per token\\n    mapping(address => uint) public tokensRewarded; // How many tokens have been sent as rewards in total per token\\n\\n    constructor(address _lnx, address _vault) {\\n        lnx = IERC20(_lnx);\\n        governance = msg.sender;\\n        vault= IVault(_vault);\\n    }\\n\\n    function setWGLP(address _WGLP) external {\\n        require(msg.sender == governance);\\n        WGLP = _WGLP;\\n    }\\n\\n    function setProtocol(address _protocol) external {\\n        require(msg.sender == governance);\\n        protocol = _protocol;\\n    }\\n\\n    function receiveRewards(address token, uint amount) external {\\n        require(msg.sender == protocol);\\n        IERC20(token).transferFrom(protocol, address(this), amount);\\n        tokensRewarded[token] += amount;\\n    }\\n\\n    function stake(uint amount) external {\\n        lnx.transferFrom(msg.sender, address(this), amount);\\n        totalStaked += amount;\\n        userStaked[msg.sender] += amount;\\n    }\\n\\n    function unstake(uint amount) external {\\n        require(userStaked[msg.sender] >= amount);\\n        totalStaked -= amount;\\n        userStaked[msg.sender] -= amount;\\n        lnx.transfer(msg.sender, amount);\\n    }\\n\\n    function claimRewards(address account) external {\\n        require(msg.sender == account || msg.sender == address(protocol), \\\"Cannot claim for another account\\\");\\n        address token;\\n        uint rewards;\\n        for(uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\\n            else {\\n                rewards = claimableRewards(account, token);\\n                IERC20(token).transfer(account, rewards);\\n                userClaimed[account][token] = tokensRewarded[token];\\n            }\\n        }\\n        token = WGLP;\\n        if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\\n        else{\\n            rewards = claimableRewards(account, token);\\n            IERC20(token).transfer(account, rewards);\\n            userClaimed[account][token] = tokensRewarded[token];\\n        }\\n    }\\n\\n    function claimableRewards(address account, address token) public view returns (uint) {\\n        uint rewards = tokensRewarded[token];\\n        uint accountRewards = (rewards.sub(userClaimed[account][token])).mul(userStaked[account]).div(totalStaked);\\n        return accountRewards;\\n    }\\n}\",\"keccak256\":\"0x72630036f480659734d5eea9c1a9257668b506e70f7a0e53d2425adaad37ad08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c54380380610c5483398101604081905261002f91610086565b600080546001600160a01b039384166001600160a01b03199182161790915560048054821633179055600380549290931691161790556100b9565b80516001600160a01b038116811461008157600080fd5b919050565b6000806040838503121561009957600080fd5b6100a28361006a565b91506100b06020840161006a565b90509250929050565b610b8c806100c86000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063817b1cd211610097578063a694fc3a11610066578063a694fc3a14610231578063acc3a93914610244578063ef5cfb8c14610264578063fbfa77cf1461027757600080fd5b8063817b1cd2146101ef5780638ce74426146101f8578063906c78bb1461020b5780639aa498641461021e57600080fd5b80635aa6e675116100d35780635aa6e6751461017e5780635bf2d5ef146101a95780636be9dcce146101bc57806370ce170c146101cf57600080fd5b80630a9d793d14610105578063289b2df11461011a57806329147fab146101585780632e17de781461016b575b600080fd5b6101186101133660046109c2565b61028a565b005b6101456101283660046109df565b600760209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101186101663660046109c2565b6102d0565b610118610179366004610a18565b610316565b600454610191906001600160a01b031681565b6040516001600160a01b03909116815260200161014f565b600254610191906001600160a01b031681565b6101456101ca3660046109df565b6103e6565b6101456101dd3660046109c2565b60086020526000908152604090205481565b61014560065481565b600154610191906001600160a01b031681565b600054610191906001600160a01b031681565b61011861022c366004610a31565b610453565b61011861023f366004610a18565b610519565b6101456102523660046109c2565b60056020526000908152604090205481565b6101186102723660046109c2565b6105d3565b600354610191906001600160a01b031681565b6004546001600160a01b031633146102a157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146102e757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526005602052604090205481111561033257600080fd5b80600660008282546103449190610a73565b90915550503360009081526005602052604081208054839290610368908490610a73565b909155505060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190610a8a565b5050565b6001600160a01b0380821660008181526008602090815260408083205460065495881684526005835281842054600784528285209585529490925282205491939092849261044a92916104449161043e90879061097f565b90610992565b9061099e565b95945050505050565b6001546001600160a01b0316331461046a57600080fd5b6001546040516323b872dd60e01b81526001600160a01b03918216600482015230602482015260448101839052908316906323b872dd906064016020604051808303816000875af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610a8a565b506001600160a01b03821660009081526008602052604081208054839290610510908490610aac565b90915550505050565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190610a8a565b5080600660008282546105a79190610aac565b909155505033600090815260056020526040812080548392906105cb908490610aac565b909155505050565b336001600160a01b03821614806105f457506001546001600160a01b031633145b61065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74604482015260640160405180910390fd5b60008060005b600360009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190610ac4565b811015610874576003546040517fe468baf0000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063e468baf090602401602060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190610add565b925061077484846103e6565b6107ae576001600160a01b038084166000818152600860209081526040808320549489168352600782528083209383529290522055610862565b6107b884846103e6565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529193509084169063a9059cbb906044016020604051808303816000875af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610a8a565b506001600160a01b0380841660008181526008602090815260408083205494891683526007825280832093835292905220555b8061086c81610afa565b915050610664565b506002546001600160a01b0316915061088d83836103e6565b6108c7576001600160a01b038083166000818152600860209081526040808320549488168352600782528083209383529290522055505050565b6108d183836103e6565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610a8a565b506001600160a01b038083166000818152600860209081526040808320549488168352600782528083209383529290522055505050565b600061098b8284610a73565b9392505050565b600061098b8284610b15565b600061098b8284610b34565b6001600160a01b03811681146109bf57600080fd5b50565b6000602082840312156109d457600080fd5b813561098b816109aa565b600080604083850312156109f257600080fd5b82356109fd816109aa565b91506020830135610a0d816109aa565b809150509250929050565b600060208284031215610a2a57600080fd5b5035919050565b60008060408385031215610a4457600080fd5b8235610a4f816109aa565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a8557610a85610a5d565b500390565b600060208284031215610a9c57600080fd5b8151801515811461098b57600080fd5b60008219821115610abf57610abf610a5d565b500190565b600060208284031215610ad657600080fd5b5051919050565b600060208284031215610aef57600080fd5b815161098b816109aa565b6000600019821415610b0e57610b0e610a5d565b5060010190565b6000816000190483118215151615610b2f57610b2f610a5d565b500290565b600082610b5157634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122032a079cfd7e85318f3194400afa821503bf78c2b0351e2c8670d48a5049c2e1964736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063817b1cd211610097578063a694fc3a11610066578063a694fc3a14610231578063acc3a93914610244578063ef5cfb8c14610264578063fbfa77cf1461027757600080fd5b8063817b1cd2146101ef5780638ce74426146101f8578063906c78bb1461020b5780639aa498641461021e57600080fd5b80635aa6e675116100d35780635aa6e6751461017e5780635bf2d5ef146101a95780636be9dcce146101bc57806370ce170c146101cf57600080fd5b80630a9d793d14610105578063289b2df11461011a57806329147fab146101585780632e17de781461016b575b600080fd5b6101186101133660046109c2565b61028a565b005b6101456101283660046109df565b600760209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b6101186101663660046109c2565b6102d0565b610118610179366004610a18565b610316565b600454610191906001600160a01b031681565b6040516001600160a01b03909116815260200161014f565b600254610191906001600160a01b031681565b6101456101ca3660046109df565b6103e6565b6101456101dd3660046109c2565b60086020526000908152604090205481565b61014560065481565b600154610191906001600160a01b031681565b600054610191906001600160a01b031681565b61011861022c366004610a31565b610453565b61011861023f366004610a18565b610519565b6101456102523660046109c2565b60056020526000908152604090205481565b6101186102723660046109c2565b6105d3565b600354610191906001600160a01b031681565b6004546001600160a01b031633146102a157600080fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6004546001600160a01b031633146102e757600080fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b3360009081526005602052604090205481111561033257600080fd5b80600660008282546103449190610a73565b90915550503360009081526005602052604081208054839290610368908490610a73565b909155505060005460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af11580156103be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e29190610a8a565b5050565b6001600160a01b0380821660008181526008602090815260408083205460065495881684526005835281842054600784528285209585529490925282205491939092849261044a92916104449161043e90879061097f565b90610992565b9061099e565b95945050505050565b6001546001600160a01b0316331461046a57600080fd5b6001546040516323b872dd60e01b81526001600160a01b03918216600482015230602482015260448101839052908316906323b872dd906064016020604051808303816000875af11580156104c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e79190610a8a565b506001600160a01b03821660009081526008602052604081208054839290610510908490610aac565b90915550505050565b6000546040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af1158015610570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105949190610a8a565b5080600660008282546105a79190610aac565b909155505033600090815260056020526040812080548392906105cb908490610aac565b909155505050565b336001600160a01b03821614806105f457506001546001600160a01b031633145b61065e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74604482015260640160405180910390fd5b60008060005b600360009054906101000a90046001600160a01b03166001600160a01b0316630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106db9190610ac4565b811015610874576003546040517fe468baf0000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b039091169063e468baf090602401602060405180830381865afa158015610744573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107689190610add565b925061077484846103e6565b6107ae576001600160a01b038084166000818152600860209081526040808320549489168352600782528083209383529290522055610862565b6107b884846103e6565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018390529193509084169063a9059cbb906044016020604051808303816000875af115801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f9190610a8a565b506001600160a01b0380841660008181526008602090815260408083205494891683526007825280832093835292905220555b8061086c81610afa565b915050610664565b506002546001600160a01b0316915061088d83836103e6565b6108c7576001600160a01b038083166000818152600860209081526040808320549488168352600782528083209383529290522055505050565b6108d183836103e6565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509083169063a9059cbb906044016020604051808303816000875af1158015610924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109489190610a8a565b506001600160a01b038083166000818152600860209081526040808320549488168352600782528083209383529290522055505050565b600061098b8284610a73565b9392505050565b600061098b8284610b15565b600061098b8284610b34565b6001600160a01b03811681146109bf57600080fd5b50565b6000602082840312156109d457600080fd5b813561098b816109aa565b600080604083850312156109f257600080fd5b82356109fd816109aa565b91506020830135610a0d816109aa565b809150509250929050565b600060208284031215610a2a57600080fd5b5035919050565b60008060408385031215610a4457600080fd5b8235610a4f816109aa565b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b600082821015610a8557610a85610a5d565b500390565b600060208284031215610a9c57600080fd5b8151801515811461098b57600080fd5b60008219821115610abf57610abf610a5d565b500190565b600060208284031215610ad657600080fd5b5051919050565b600060208284031215610aef57600080fd5b815161098b816109aa565b6000600019821415610b0e57610b0e610a5d565b5060010190565b6000816000190483118215151615610b2f57610b2f610a5d565b500290565b600082610b5157634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122032a079cfd7e85318f3194400afa821503bf78c2b0351e2c8670d48a5049c2e1964736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3048,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "lnx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)3029"
      },
      {
        "astId": 3050,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "protocol",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3052,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "WGLP",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3055,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVault)3042"
      },
      {
        "astId": 3057,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3061,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3063,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "totalStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3069,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userClaimed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3073,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "tokensRewarded",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3029": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)3042": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}