{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lnx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensRewarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ac9c01fa41d27f8e258fe7937a7313cf9c16083862d12ab611da5486874e181",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1238136",
    "logsBloom": "0x
    "blockHash": "0x6c7af64abc82c8ef7acdc1cbfdad21db75447c07fa738aecba2207a150d0e041",
    "transactionHash": "0x8ac9c01fa41d27f8e258fe7937a7313cf9c16083862d12ab611da5486874e181",
    "logs": [],
    "blockNumber": 3888207,
    "cumulativeGasUsed": "1238136",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A"
  ],
  "solcInputHash": "a18034bcaece25069fec11c777dcb116",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeRewards.sol\":\"StakeRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/StakeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ncontract StakeRewards {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public lnx; // Governance token\\n    address public protocol; // Lending protocol\\n    IVault public vault;\\n    address public governance;\\n    mapping(address => uint) public userStaked; // How much LNX has an user staked\\n    uint public totalStaked; // LNX staked in total\\n    mapping(address => mapping(address => uint)) public userClaimed; // How many tokens has an user claimed per token\\n    mapping(address => uint) public tokensRewarded; // How many tokens have been sent as rewards in total per token\\n\\n    constructor(address _lnx, address _vault) {\\n        lnx = IERC20(_lnx);\\n        governance = msg.sender;\\n        vault= IVault(_vault);\\n    }\\n\\n    function setProtocol(address _protocol) external {\\n        require(msg.sender == governance);\\n        protocol = _protocol;\\n    }\\n\\n    function receiveRewards(address token, uint amount) external {\\n        require(msg.sender == protocol);\\n        IERC20(token).transferFrom(protocol, address(this), amount);\\n        tokensRewarded[token] += amount;\\n    }\\n\\n    function stake(uint amount) external {\\n        lnx.transferFrom(msg.sender, address(this), amount);\\n        totalStaked += amount;\\n        userStaked[msg.sender] += amount;\\n    }\\n\\n    function unstake(uint amount) external {\\n        require(userStaked[msg.sender] >= amount);\\n        totalStaked -= amount;\\n        userStaked[msg.sender] -= amount;\\n        lnx.transfer(msg.sender, amount);\\n    }\\n\\n    function claimRewards(address account) external {\\n        require(msg.sender == account || msg.sender == address(protocol), \\\"Cannot claim for another account\\\");\\n        address token;\\n        uint rewards;\\n        for(uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\\n            rewards = claimableRewards(account, token);\\n            IERC20(token).transfer(account, rewards);\\n            userClaimed[account][token] = tokensRewarded[token];\\n        }\\n    }\\n\\n    function claimableRewards(address account, address token) public view returns (uint) {\\n        uint rewards = tokensRewarded[token];\\n        uint accountRewards = (rewards.sub(userClaimed[account][token])).mul(userStaked[account]).div(totalStaked);\\n        return accountRewards;\\n    }\\n}\",\"keccak256\":\"0xbd6ae9da7d290e07512ac3946987da68673dbe89dd081ee1d0e284edf19e07c8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620015e1380380620015e183398181016040528101906200003791906200016b565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001338262000106565b9050919050565b620001458162000126565b81146200015157600080fd5b50565b60008151905062000165816200013a565b92915050565b6000806040838503121562000185576200018462000101565b5b6000620001958582860162000154565b9250506020620001a88582860162000154565b9150509250929050565b61141f80620001c26000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638ce744261161008c578063a694fc3a11610066578063a694fc3a1461024b578063acc3a93914610267578063ef5cfb8c14610297578063fbfa77cf146102b3576100ea565b80638ce74426146101f3578063906c78bb146102115780639aa498641461022f576100ea565b80635aa6e675116100c85780635aa6e675146101575780636be9dcce1461017557806370ce170c146101a5578063817b1cd2146101d5576100ea565b80630a9d793d146100ef578063289b2df11461010b5780632e17de781461013b575b600080fd5b61010960048036038101906101049190610e4d565b6102d1565b005b61012560048036038101906101209190610e7a565b61036f565b6040516101329190610ed3565b60405180910390f35b61015560048036038101906101509190610f1a565b610394565b005b61015f6104f1565b60405161016c9190610f56565b60405180910390f35b61018f600480360381019061018a9190610e7a565b610517565b60405161019c9190610ed3565b60405180910390f35b6101bf60048036038101906101ba9190610e4d565b61065f565b6040516101cc9190610ed3565b60405180910390f35b6101dd610677565b6040516101ea9190610ed3565b60405180910390f35b6101fb61067d565b6040516102089190610f56565b60405180910390f35b6102196106a3565b6040516102269190610fd0565b60405180910390f35b61024960048036038101906102449190610feb565b6106c7565b005b61026560048036038101906102609190610f1a565b61081e565b005b610281600480360381019061027c9190610e4d565b610931565b60405161028e9190610ed3565b60405180910390f35b6102b160048036038101906102ac9190610e4d565b610949565b005b6102bb610d82565b6040516102c8919061104c565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6006602052816000526040600020602052806000526040600020600091509150505481565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103e057600080fd5b80600560008282546103f29190611096565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104489190611096565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104aa9291906110ca565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed919061112b565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610652600554610644600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610636600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610da890919063ffffffff16565b610dbe90919063ffffffff16565b610dd490919063ffffffff16565b9050809250505092915050565b60076020528060005260406000206000915090505481565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072157600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630846040518463ffffffff1660e01b815260040161078093929190611158565b6020604051808303816000875af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c3919061112b565b5080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610813919061118f565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161087b93929190611158565b6020604051808303816000875af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be919061112b565b5080600560008282546108d1919061118f565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610927919061118f565b9250508190555050565b60046020528060005260406000206000915090505481565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109d05750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0690611242565b60405180910390fd5b60008060005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190611277565b811015610d7c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e468baf0826040518263ffffffff1660e01b8152600401610b089190610ed3565b602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906112b9565b92506000610b578585610517565b1415610c1e57600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610c288484610517565b91508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b8152600401610c659291906110ca565b6020604051808303816000875af1158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca8919061112b565b50600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610d74906112e6565b915050610a15565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183610db69190611096565b905092915050565b60008183610dcc919061132f565b905092915050565b60008183610de291906113b8565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1a82610def565b9050919050565b610e2a81610e0f565b8114610e3557600080fd5b50565b600081359050610e4781610e21565b92915050565b600060208284031215610e6357610e62610dea565b5b6000610e7184828501610e38565b91505092915050565b60008060408385031215610e9157610e90610dea565b5b6000610e9f85828601610e38565b9250506020610eb085828601610e38565b9150509250929050565b6000819050919050565b610ecd81610eba565b82525050565b6000602082019050610ee86000830184610ec4565b92915050565b610ef781610eba565b8114610f0257600080fd5b50565b600081359050610f1481610eee565b92915050565b600060208284031215610f3057610f2f610dea565b5b6000610f3e84828501610f05565b91505092915050565b610f5081610e0f565b82525050565b6000602082019050610f6b6000830184610f47565b92915050565b6000819050919050565b6000610f96610f91610f8c84610def565b610f71565b610def565b9050919050565b6000610fa882610f7b565b9050919050565b6000610fba82610f9d565b9050919050565b610fca81610faf565b82525050565b6000602082019050610fe56000830184610fc1565b92915050565b6000806040838503121561100257611001610dea565b5b600061101085828601610e38565b925050602061102185828601610f05565b9150509250929050565b600061103682610f9d565b9050919050565b6110468161102b565b82525050565b6000602082019050611061600083018461103d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110a182610eba565b91506110ac83610eba565b9250828210156110bf576110be611067565b5b828203905092915050565b60006040820190506110df6000830185610f47565b6110ec6020830184610ec4565b9392505050565b60008115159050919050565b611108816110f3565b811461111357600080fd5b50565b600081519050611125816110ff565b92915050565b60006020828403121561114157611140610dea565b5b600061114f84828501611116565b91505092915050565b600060608201905061116d6000830186610f47565b61117a6020830185610f47565b6111876040830184610ec4565b949350505050565b600061119a82610eba565b91506111a583610eba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111da576111d9611067565b5b828201905092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b600061122c6020836111e5565b9150611237826111f6565b602082019050919050565b6000602082019050818103600083015261125b8161121f565b9050919050565b60008151905061127181610eee565b92915050565b60006020828403121561128d5761128c610dea565b5b600061129b84828501611262565b91505092915050565b6000815190506112b381610e21565b92915050565b6000602082840312156112cf576112ce610dea565b5b60006112dd848285016112a4565b91505092915050565b60006112f182610eba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561132457611323611067565b5b600182019050919050565b600061133a82610eba565b915061134583610eba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561137e5761137d611067565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c382610eba565b91506113ce83610eba565b9250826113de576113dd611389565b5b82820490509291505056fea2646970667358221220368557b70d5d5518f187072a9c10089f5bd00babf512bd48abcbab2f6aac300e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638ce744261161008c578063a694fc3a11610066578063a694fc3a1461024b578063acc3a93914610267578063ef5cfb8c14610297578063fbfa77cf146102b3576100ea565b80638ce74426146101f3578063906c78bb146102115780639aa498641461022f576100ea565b80635aa6e675116100c85780635aa6e675146101575780636be9dcce1461017557806370ce170c146101a5578063817b1cd2146101d5576100ea565b80630a9d793d146100ef578063289b2df11461010b5780632e17de781461013b575b600080fd5b61010960048036038101906101049190610e4d565b6102d1565b005b61012560048036038101906101209190610e7a565b61036f565b6040516101329190610ed3565b60405180910390f35b61015560048036038101906101509190610f1a565b610394565b005b61015f6104f1565b60405161016c9190610f56565b60405180910390f35b61018f600480360381019061018a9190610e7a565b610517565b60405161019c9190610ed3565b60405180910390f35b6101bf60048036038101906101ba9190610e4d565b61065f565b6040516101cc9190610ed3565b60405180910390f35b6101dd610677565b6040516101ea9190610ed3565b60405180910390f35b6101fb61067d565b6040516102089190610f56565b60405180910390f35b6102196106a3565b6040516102269190610fd0565b60405180910390f35b61024960048036038101906102449190610feb565b6106c7565b005b61026560048036038101906102609190610f1a565b61081e565b005b610281600480360381019061027c9190610e4d565b610931565b60405161028e9190610ed3565b60405180910390f35b6102b160048036038101906102ac9190610e4d565b610949565b005b6102bb610d82565b6040516102c8919061104c565b60405180910390f35b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461032b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6006602052816000526040600020602052806000526040600020600091509150505481565b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156103e057600080fd5b80600560008282546103f29190611096565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104489190611096565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016104aa9291906110ca565b6020604051808303816000875af11580156104c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ed919061112b565b5050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610652600554610644600460008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610636600660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610da890919063ffffffff16565b610dbe90919063ffffffff16565b610dd490919063ffffffff16565b9050809250505092915050565b60076020528060005260406000206000915090505481565b60055481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461072157600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630846040518463ffffffff1660e01b815260040161078093929190611158565b6020604051808303816000875af115801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c3919061112b565b5080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610813919061118f565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161087b93929190611158565b6020604051808303816000875af115801561089a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108be919061112b565b5080600560008282546108d1919061118f565b9250508190555080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610927919061118f565b9250508190555050565b60046020528060005260406000206000915090505481565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109d05750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610a0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0690611242565b60405180910390fd5b60008060005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa69190611277565b811015610d7c57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e468baf0826040518263ffffffff1660e01b8152600401610b089190610ed3565b602060405180830381865afa158015610b25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4991906112b9565b92506000610b578585610517565b1415610c1e57600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610c288484610517565b91508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b8152600401610c659291906110ca565b6020604051808303816000875af1158015610c84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca8919061112b565b50600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508080610d74906112e6565b915050610a15565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008183610db69190611096565b905092915050565b60008183610dcc919061132f565b905092915050565b60008183610de291906113b8565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e1a82610def565b9050919050565b610e2a81610e0f565b8114610e3557600080fd5b50565b600081359050610e4781610e21565b92915050565b600060208284031215610e6357610e62610dea565b5b6000610e7184828501610e38565b91505092915050565b60008060408385031215610e9157610e90610dea565b5b6000610e9f85828601610e38565b9250506020610eb085828601610e38565b9150509250929050565b6000819050919050565b610ecd81610eba565b82525050565b6000602082019050610ee86000830184610ec4565b92915050565b610ef781610eba565b8114610f0257600080fd5b50565b600081359050610f1481610eee565b92915050565b600060208284031215610f3057610f2f610dea565b5b6000610f3e84828501610f05565b91505092915050565b610f5081610e0f565b82525050565b6000602082019050610f6b6000830184610f47565b92915050565b6000819050919050565b6000610f96610f91610f8c84610def565b610f71565b610def565b9050919050565b6000610fa882610f7b565b9050919050565b6000610fba82610f9d565b9050919050565b610fca81610faf565b82525050565b6000602082019050610fe56000830184610fc1565b92915050565b6000806040838503121561100257611001610dea565b5b600061101085828601610e38565b925050602061102185828601610f05565b9150509250929050565b600061103682610f9d565b9050919050565b6110468161102b565b82525050565b6000602082019050611061600083018461103d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006110a182610eba565b91506110ac83610eba565b9250828210156110bf576110be611067565b5b828203905092915050565b60006040820190506110df6000830185610f47565b6110ec6020830184610ec4565b9392505050565b60008115159050919050565b611108816110f3565b811461111357600080fd5b50565b600081519050611125816110ff565b92915050565b60006020828403121561114157611140610dea565b5b600061114f84828501611116565b91505092915050565b600060608201905061116d6000830186610f47565b61117a6020830185610f47565b6111876040830184610ec4565b949350505050565b600061119a82610eba565b91506111a583610eba565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111da576111d9611067565b5b828201905092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b600061122c6020836111e5565b9150611237826111f6565b602082019050919050565b6000602082019050818103600083015261125b8161121f565b9050919050565b60008151905061127181610eee565b92915050565b60006020828403121561128d5761128c610dea565b5b600061129b84828501611262565b91505092915050565b6000815190506112b381610e21565b92915050565b6000602082840312156112cf576112ce610dea565b5b60006112dd848285016112a4565b91505092915050565b60006112f182610eba565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561132457611323611067565b5b600182019050919050565b600061133a82610eba565b915061134583610eba565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561137e5761137d611067565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c382610eba565b91506113ce83610eba565b9250826113de576113dd611389565b5b82820490509291505056fea2646970667358221220368557b70d5d5518f187072a9c10089f5bd00babf512bd48abcbab2f6aac300e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4209,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "lnx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)4190"
      },
      {
        "astId": 4211,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "protocol",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4214,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "vault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IVault)4203"
      },
      {
        "astId": 4216,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "governance",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 4220,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userStaked",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4222,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "totalStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4228,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userClaimed",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4232,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "tokensRewarded",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)4190": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)4203": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}