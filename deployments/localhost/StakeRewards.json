{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lnx",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WGLP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "receiveRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WGLP",
          "type": "address"
        }
      ],
      "name": "setWGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokensRewarded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x846ed935c9a14722a1ff156cf8f2c9b8617d25646dd13ba6866c1edc7627af13",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1424845",
    "logsBloom": "0x
    "blockHash": "0xe606a25ff96d50103ab9ce02cdff9c0b9f4d9ccd2ed5f1e542fbb6ab17590103",
    "transactionHash": "0x846ed935c9a14722a1ff156cf8f2c9b8617d25646dd13ba6866c1edc7627af13",
    "logs": [],
    "blockNumber": 4020365,
    "cumulativeGasUsed": "1424845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A"
  ],
  "solcInputHash": "a80d3f68f915b916ebf68a61cfb6b68b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WGLP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"receiveRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WGLP\",\"type\":\"address\"}],\"name\":\"setWGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensRewarded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakeRewards.sol\":\"StakeRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/StakeRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IVault {\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint) external view returns (address);\\n}\\n\\ncontract StakeRewards {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public lnx; // Governance token\\n    address public protocol; // Lending protocol\\n    address public WGLP;\\n    IVault public vault;\\n    address public governance;\\n    mapping(address => uint) public userStaked; // How much LNX has an user staked\\n    uint public totalStaked; // LNX staked in total\\n    mapping(address => mapping(address => uint)) public userClaimed; // How many tokens has an user claimed per token\\n    mapping(address => uint) public tokensRewarded; // How many tokens have been sent as rewards in total per token\\n\\n    constructor(address _lnx, address _vault) {\\n        lnx = IERC20(_lnx);\\n        governance = msg.sender;\\n        vault= IVault(_vault);\\n    }\\n\\n    function setWGLP(address _WGLP) external {\\n        require(msg.sender == governance);\\n        WGLP = _WGLP;\\n    }\\n\\n    function setProtocol(address _protocol) external {\\n        require(msg.sender == governance);\\n        protocol = _protocol;\\n    }\\n\\n    function receiveRewards(address token, uint amount) external {\\n        require(msg.sender == protocol);\\n        IERC20(token).transferFrom(protocol, address(this), amount);\\n        tokensRewarded[token] += amount;\\n    }\\n\\n    function stake(uint amount) external {\\n        lnx.transferFrom(msg.sender, address(this), amount);\\n        totalStaked += amount;\\n        userStaked[msg.sender] += amount;\\n    }\\n\\n    function unstake(uint amount) external {\\n        require(userStaked[msg.sender] >= amount);\\n        totalStaked -= amount;\\n        userStaked[msg.sender] -= amount;\\n        lnx.transfer(msg.sender, amount);\\n    }\\n\\n    function claimRewards(address account) external {\\n        require(msg.sender == account || msg.sender == address(protocol), \\\"Cannot claim for another account\\\");\\n        address token;\\n        uint rewards;\\n        for(uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\\n            token = vault.allWhitelistedTokens(i);\\n            if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\\n            else {\\n                rewards = claimableRewards(account, token);\\n                IERC20(token).transfer(account, rewards);\\n                userClaimed[account][token] = tokensRewarded[token];\\n            }\\n        }\\n        token = WGLP;\\n        if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\\n        else{\\n            rewards = claimableRewards(account, token);\\n            IERC20(token).transfer(account, rewards);\\n            userClaimed[account][token] = tokensRewarded[token];\\n        }\\n    }\\n\\n    function claimableRewards(address account, address token) public view returns (uint) {\\n        uint rewards = tokensRewarded[token];\\n        uint accountRewards = (rewards.sub(userClaimed[account][token])).mul(userStaked[account]).div(totalStaked);\\n        return accountRewards;\\n    }\\n}\",\"keccak256\":\"0x72630036f480659734d5eea9c1a9257668b506e70f7a0e53d2425adaad37ad08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019423803806200194283398181016040528101906200003791906200016b565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001b2565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001338262000106565b9050919050565b620001458162000126565b81146200015157600080fd5b50565b60008151905062000165816200013a565b92915050565b6000806040838503121562000185576200018462000101565b5b6000620001958582860162000154565b9250506020620001a88582860162000154565b9150509250929050565b61178080620001c26000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063817b1cd211610097578063a694fc3a11610066578063a694fc3a1461029b578063acc3a939146102b7578063ef5cfb8c146102e7578063fbfa77cf1461030357610100565b8063817b1cd2146102255780638ce7442614610243578063906c78bb146102615780639aa498641461027f57610100565b80635aa6e675116100d35780635aa6e675146101895780635bf2d5ef146101a75780636be9dcce146101c557806370ce170c146101f557610100565b80630a9d793d14610105578063289b2df11461012157806329147fab146101515780632e17de781461016d575b600080fd5b61011f600480360381019061011a91906111ae565b610321565b005b61013b600480360381019061013691906111db565b6103bf565b6040516101489190611234565b60405180910390f35b61016b600480360381019061016691906111ae565b6103e4565b005b6101876004803603810190610182919061127b565b610482565b005b6101916105df565b60405161019e91906112b7565b60405180910390f35b6101af610605565b6040516101bc91906112b7565b60405180910390f35b6101df60048036038101906101da91906111db565b61062b565b6040516101ec9190611234565b60405180910390f35b61020f600480360381019061020a91906111ae565b610773565b60405161021c9190611234565b60405180910390f35b61022d61078b565b60405161023a9190611234565b60405180910390f35b61024b610791565b60405161025891906112b7565b60405180910390f35b6102696107b7565b6040516102769190611331565b60405180910390f35b6102996004803603810190610294919061134c565b6107db565b005b6102b560048036038101906102b0919061127b565b610932565b005b6102d160048036038101906102cc91906111ae565b610a45565b6040516102de9190611234565b60405180910390f35b61030160048036038101906102fc91906111ae565b610a5d565b005b61030b6110e3565b60405161031891906113ad565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043e57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104ce57600080fd5b80600660008282546104e091906113f7565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053691906113f7565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161059892919061142b565b6020604051808303816000875af11580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db919061148c565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610766600654610758600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461074a600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548761110990919063ffffffff16565b61111f90919063ffffffff16565b61113590919063ffffffff16565b9050809250505092915050565b60086020528060005260406000206000915090505481565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630846040518463ffffffff1660e01b8152600401610894939291906114b9565b6020604051808303816000875af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061148c565b5080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461092791906114f0565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161098f939291906114b9565b6020604051808303816000875af11580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d2919061148c565b5080600660008282546109e591906114f0565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a3b91906114f0565b9250508190555050565b60056020528060005260406000206000915090505481565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ae45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a906115a3565b60405180910390fd5b60008060005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906115d8565b811015610e9557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e468baf0826040518263ffffffff1660e01b8152600401610c1c9190611234565b602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d919061161a565b92506000610c6b858561062b565b1415610d3657600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e82565b610d40848461062b565b91508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b8152600401610d7d92919061142b565b6020604051808303816000875af1158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc0919061148c565b50600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8080610e8d90611647565b915050610b29565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000610ec7848461062b565b1415610f9257600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110de565b610f9c838361062b565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401610fd992919061142b565b6020604051808303816000875af1158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061148c565b50600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818361111791906113f7565b905092915050565b6000818361112d9190611690565b905092915050565b600081836111439190611719565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117b82611150565b9050919050565b61118b81611170565b811461119657600080fd5b50565b6000813590506111a881611182565b92915050565b6000602082840312156111c4576111c361114b565b5b60006111d284828501611199565b91505092915050565b600080604083850312156111f2576111f161114b565b5b600061120085828601611199565b925050602061121185828601611199565b9150509250929050565b6000819050919050565b61122e8161121b565b82525050565b60006020820190506112496000830184611225565b92915050565b6112588161121b565b811461126357600080fd5b50565b6000813590506112758161124f565b92915050565b6000602082840312156112915761129061114b565b5b600061129f84828501611266565b91505092915050565b6112b181611170565b82525050565b60006020820190506112cc60008301846112a8565b92915050565b6000819050919050565b60006112f76112f26112ed84611150565b6112d2565b611150565b9050919050565b6000611309826112dc565b9050919050565b600061131b826112fe565b9050919050565b61132b81611310565b82525050565b60006020820190506113466000830184611322565b92915050565b600080604083850312156113635761136261114b565b5b600061137185828601611199565b925050602061138285828601611266565b9150509250929050565b6000611397826112fe565b9050919050565b6113a78161138c565b82525050565b60006020820190506113c2600083018461139e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114028261121b565b915061140d8361121b565b9250828210156114205761141f6113c8565b5b828203905092915050565b600060408201905061144060008301856112a8565b61144d6020830184611225565b9392505050565b60008115159050919050565b61146981611454565b811461147457600080fd5b50565b60008151905061148681611460565b92915050565b6000602082840312156114a2576114a161114b565b5b60006114b084828501611477565b91505092915050565b60006060820190506114ce60008301866112a8565b6114db60208301856112a8565b6114e86040830184611225565b949350505050565b60006114fb8261121b565b91506115068361121b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561153b5761153a6113c8565b5b828201905092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b600061158d602083611546565b915061159882611557565b602082019050919050565b600060208201905081810360008301526115bc81611580565b9050919050565b6000815190506115d28161124f565b92915050565b6000602082840312156115ee576115ed61114b565b5b60006115fc848285016115c3565b91505092915050565b60008151905061161481611182565b92915050565b6000602082840312156116305761162f61114b565b5b600061163e84828501611605565b91505092915050565b60006116528261121b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611685576116846113c8565b5b600182019050919050565b600061169b8261121b565b91506116a68361121b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116df576116de6113c8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117248261121b565b915061172f8361121b565b92508261173f5761173e6116ea565b5b82820490509291505056fea264697066735822122091142c332c7a687df9f67f2fd0cf5b8b1a65539d221a0f717a61c084e9f5871764736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063817b1cd211610097578063a694fc3a11610066578063a694fc3a1461029b578063acc3a939146102b7578063ef5cfb8c146102e7578063fbfa77cf1461030357610100565b8063817b1cd2146102255780638ce7442614610243578063906c78bb146102615780639aa498641461027f57610100565b80635aa6e675116100d35780635aa6e675146101895780635bf2d5ef146101a75780636be9dcce146101c557806370ce170c146101f557610100565b80630a9d793d14610105578063289b2df11461012157806329147fab146101515780632e17de781461016d575b600080fd5b61011f600480360381019061011a91906111ae565b610321565b005b61013b600480360381019061013691906111db565b6103bf565b6040516101489190611234565b60405180910390f35b61016b600480360381019061016691906111ae565b6103e4565b005b6101876004803603810190610182919061127b565b610482565b005b6101916105df565b60405161019e91906112b7565b60405180910390f35b6101af610605565b6040516101bc91906112b7565b60405180910390f35b6101df60048036038101906101da91906111db565b61062b565b6040516101ec9190611234565b60405180910390f35b61020f600480360381019061020a91906111ae565b610773565b60405161021c9190611234565b60405180910390f35b61022d61078b565b60405161023a9190611234565b60405180910390f35b61024b610791565b60405161025891906112b7565b60405180910390f35b6102696107b7565b6040516102769190611331565b60405180910390f35b6102996004803603810190610294919061134c565b6107db565b005b6102b560048036038101906102b0919061127b565b610932565b005b6102d160048036038101906102cc91906111ae565b610a45565b6040516102de9190611234565b60405180910390f35b61030160048036038101906102fc91906111ae565b610a5d565b005b61030b6110e3565b60405161031891906113ad565b60405180910390f35b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461037b57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6007602052816000526040600020602052806000526040600020600091509150505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043e57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156104ce57600080fd5b80600660008282546104e091906113f7565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461053691906113f7565b9250508190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161059892919061142b565b6020604051808303816000875af11580156105b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105db919061148c565b5050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610766600654610758600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461074a600760008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548761110990919063ffffffff16565b61111f90919063ffffffff16565b61113590919063ffffffff16565b9050809250505092915050565b60086020528060005260406000206000915090505481565b60065481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083557600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166323b872dd600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1630846040518463ffffffff1660e01b8152600401610894939291906114b9565b6020604051808303816000875af11580156108b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d7919061148c565b5080600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461092791906114f0565b925050819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161098f939291906114b9565b6020604051808303816000875af11580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d2919061148c565b5080600660008282546109e591906114f0565b9250508190555080600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a3b91906114f0565b9250508190555050565b60056020528060005260406000206000915090505481565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610ae45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a906115a3565b60405180910390fd5b60008060005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630842b0766040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bba91906115d8565b811015610e9557600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e468baf0826040518263ffffffff1660e01b8152600401610c1c9190611234565b602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d919061161a565b92506000610c6b858561062b565b1415610d3657600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e82565b610d40848461062b565b91508273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85846040518363ffffffff1660e01b8152600401610d7d92919061142b565b6020604051808303816000875af1158015610d9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc0919061148c565b50600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8080610e8d90611647565b915050610b29565b50600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691506000610ec7848461062b565b1415610f9257600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110de565b610f9c838361062b565b90508173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401610fd992919061142b565b6020604051808303816000875af1158015610ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101c919061148c565b50600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000818361111791906113f7565b905092915050565b6000818361112d9190611690565b905092915050565b600081836111439190611719565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061117b82611150565b9050919050565b61118b81611170565b811461119657600080fd5b50565b6000813590506111a881611182565b92915050565b6000602082840312156111c4576111c361114b565b5b60006111d284828501611199565b91505092915050565b600080604083850312156111f2576111f161114b565b5b600061120085828601611199565b925050602061121185828601611199565b9150509250929050565b6000819050919050565b61122e8161121b565b82525050565b60006020820190506112496000830184611225565b92915050565b6112588161121b565b811461126357600080fd5b50565b6000813590506112758161124f565b92915050565b6000602082840312156112915761129061114b565b5b600061129f84828501611266565b91505092915050565b6112b181611170565b82525050565b60006020820190506112cc60008301846112a8565b92915050565b6000819050919050565b60006112f76112f26112ed84611150565b6112d2565b611150565b9050919050565b6000611309826112dc565b9050919050565b600061131b826112fe565b9050919050565b61132b81611310565b82525050565b60006020820190506113466000830184611322565b92915050565b600080604083850312156113635761136261114b565b5b600061137185828601611199565b925050602061138285828601611266565b9150509250929050565b6000611397826112fe565b9050919050565b6113a78161138c565b82525050565b60006020820190506113c2600083018461139e565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114028261121b565b915061140d8361121b565b9250828210156114205761141f6113c8565b5b828203905092915050565b600060408201905061144060008301856112a8565b61144d6020830184611225565b9392505050565b60008115159050919050565b61146981611454565b811461147457600080fd5b50565b60008151905061148681611460565b92915050565b6000602082840312156114a2576114a161114b565b5b60006114b084828501611477565b91505092915050565b60006060820190506114ce60008301866112a8565b6114db60208301856112a8565b6114e86040830184611225565b949350505050565b60006114fb8261121b565b91506115068361121b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561153b5761153a6113c8565b5b828201905092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b600061158d602083611546565b915061159882611557565b602082019050919050565b600060208201905081810360008301526115bc81611580565b9050919050565b6000815190506115d28161124f565b92915050565b6000602082840312156115ee576115ed61114b565b5b60006115fc848285016115c3565b91505092915050565b60008151905061161481611182565b92915050565b6000602082840312156116305761162f61114b565b5b600061163e84828501611605565b91505092915050565b60006116528261121b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611685576116846113c8565b5b600182019050919050565b600061169b8261121b565b91506116a68361121b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156116df576116de6113c8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006117248261121b565b915061172f8361121b565b92508261173f5761173e6116ea565b5b82820490509291505056fea264697066735822122091142c332c7a687df9f67f2fd0cf5b8b1a65539d221a0f717a61c084e9f5871764736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2327,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "lnx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)2308"
      },
      {
        "astId": 2329,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "protocol",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2331,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "WGLP",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2334,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IVault)2321"
      },
      {
        "astId": 2336,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 2340,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userStaked",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2342,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "totalStaked",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2348,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "userClaimed",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2352,
        "contract": "contracts/StakeRewards.sol:StakeRewards",
        "label": "tokensRewarded",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)2308": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IVault)2321": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}