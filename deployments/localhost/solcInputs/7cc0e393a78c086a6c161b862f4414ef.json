{
  "language": "Solidity",
  "sources": {
    "contracts/LNXRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function capSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IProtocol {\n    // Value of a debt \"token\"\n    function debtValue(address token) external view returns (uint256);\n\n    // Interest on token since last checkpoint\n    function getTokenAccruedInterest(address token) external view returns (uint256);\n\n    // How many tokens does an user owe\n    function userDebt(address account, address token) external view returns (uint256);\n\n    // How much USD does an user owe per token\n    function userDebtUSD(address account, address token) external view returns (uint256);\n\n    // How many lent tokens is it's share token backed by\n    function getShareValue(address token) external view returns (uint256);\n\n    // How many collateral tokens is it's share token backed by\n    function getCollateralShareValue() external view returns (uint256);\n\n    // Fetch the price of an asset from Chainlink oracle\n    function getLatestPrice(address token) external view returns (uint);\n\n    // Price of GLP\n    function getCollateralPrice() external view returns (uint);\n\n    // User's health factor\n    function accountHealth(address account) external view returns (uint256);\n\n    // How much an user has borrowed in total in USD\n    function accountBorrowedValue(address account) external view returns (uint256);\n\n    // How much an user has lent in total in USD\n    function accountLentValue(address account) external view returns (uint256);\n\n    // How much is lent in total in USD\n    function totalLentValue() external view returns (uint256);\n\n    // Value of an user's collateral in USD\n    function accountCollateralValue(address account) external view returns (uint256);\n\n    // Annual interest rate of borrowing a token\n    function interestRate(address token) external view returns (uint256);\n\n    // How many tokens have been borrowed from liquidity\n    function totalBorrowedAmount(address token) external view returns (uint256);\n\n    // How many tokens can an user borrow\n    function borrowingPower(address account, address token) external view returns (uint256);\n\n    // How much can an user borrow in USD\n    function borrowingPowerUSD(address account) external view returns (uint256); \n}\n\ncontract LNXRewards {\n\n    using SafeMath for uint;\n\n    IERC20 public lnx; // Governance token\n    uint256 public mintCheckpoint;\n    uint256 public baseRate; // Xe18 Tokens per second\n    IProtocol public protocol; // Lending protocol\n    address public governance;\n    mapping(address => uint) public userClaimed; // How many tokens has an user claimed\n\n    constructor(address _lnx) {\n        lnx = IERC20(_lnx);\n        governance = msg.sender;\n    }\n\n    function startRewards() external {\n        require(msg.sender == governance && baseRate == 0);\n        mintRewards();\n        baseRate = 1e16; // 0.01 LNX per second\n    }\n\n    function setProtocol(address _protocol) external {\n        require(msg.sender == governance);\n        protocol = IProtocol(_protocol);\n    }\n\n    function mintRewards() internal returns (uint256) {\n        uint amountToMint = 0;\n        if (baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()) <= 1e16) {\n            uint rate = baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()));\n            amountToMint = (block.timestamp.sub(mintCheckpoint)).mul(rate);    \n        }\n        lnx.mint(address(this), amountToMint);\n        mintCheckpoint = block.timestamp;\n        return amountToMint;\n    }\n\n    function claimRewards(address account) external {\n        require(msg.sender == account || msg.sender == address(protocol), \"Cannot claim for another account\");\n        mintRewards();\n        if (claimableRewards(account) == 0) userClaimed[account] = lnx.totalSupply();    \n        uint rewards = claimableRewards(account);\n        lnx.transfer(account, rewards);\n        userClaimed[account] = lnx.totalSupply();\n    }\n\n    function claimableRewards(address account) public view returns (uint) {\n        if (baseRate == 0) return 0;\n        uint mintable = (block.timestamp.sub(mintCheckpoint)).div(baseRate.mul(lnx.capSupply()).div(lnx.totalSupply().mul(10000)));\n        uint rewards = lnx.totalSupply().add(mintable);\n        uint accountRewards = (rewards.sub(userClaimed[account])).mul(protocol.accountLentValue(account)).div(protocol.totalLentValue());\n        return accountRewards;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}