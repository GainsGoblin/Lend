{
  "language": "Solidity",
  "sources": {
    "contracts/LNXRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function capSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IProtocol {\n    // Value of a debt \"token\"\n    function debtValue(address token) external view returns (uint256);\n\n    // Interest on token since last checkpoint\n    function getTokenAccruedInterest(address token) external view returns (uint256);\n\n    // How many tokens does an user owe\n    function userDebt(address account, address token) external view returns (uint256);\n\n    // How much USD does an user owe per token\n    function userDebtUSD(address account, address token) external view returns (uint256);\n\n    // How many lent tokens is it's share token backed by\n    function getShareValue(address token) external view returns (uint256);\n\n    // How many collateral tokens is it's share token backed by\n    function getCollateralShareValue() external view returns (uint256);\n\n    // Fetch the price of an asset from oracle\n    function getLatestPrice(address token) external view returns (uint);\n\n    // Price of GLP\n    function getCollateralPrice() external view returns (uint);\n\n    // User's health factor\n    function accountHealth(address account) external view returns (uint256);\n\n    // How much an user has borrowed in total in USD\n    function accountBorrowedValue(address account) external view returns (uint256);\n\n    // How much an user has lent in total in USD\n    function accountLentValue(address account) external view returns (uint256);\n\n    // How much is lent in total in USD\n    function totalLentValue() external view returns (uint256);\n\n    // Value of an user's collateral in USD\n    function accountCollateralValue(address account) external view returns (uint256);\n\n    // Annual interest rate of borrowing a token\n    function interestRate(address token) external view returns (uint256);\n\n    // How many tokens have been borrowed from liquidity\n    function totalBorrowedAmount(address token) external view returns (uint256);\n\n    // How many tokens can an user borrow\n    function borrowingPower(address account, address token) external view returns (uint256);\n\n    // How much can an user borrow in USD\n    function borrowingPowerUSD(address account) external view returns (uint256); \n}\n\ncontract LNXRewards {\n\n    using SafeMath for uint;\n\n    IERC20 public lnx; // Governance token\n    uint256 public mintCheckpoint;\n    uint256 public baseRate; // Wei per second\n    IProtocol public protocol; // Lending protocol\n    address public governance;\n    mapping(address => uint) public userClaimed; // How many tokens has an user claimed\n\n    constructor(address _lnx) {\n        lnx = IERC20(_lnx);\n        governance = msg.sender;\n    }\n\n    function startRewards() external {\n        require(msg.sender == governance && baseRate == 0);\n        mintRewards();\n        baseRate = 1e16; // 0.01 LNX per second\n    }\n\n    function setProtocol(address _protocol) external {\n        require(msg.sender == governance);\n        protocol = IProtocol(_protocol);\n    }\n\n    function mintRewards() internal returns (uint256) {\n        uint amountToMint = 0;\n        if (baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()) <= 1e16) {\n            uint rate = baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()));\n            amountToMint = (block.timestamp.sub(mintCheckpoint)).mul(rate);    \n        }\n        lnx.mint(address(this), amountToMint);\n        mintCheckpoint = block.timestamp;\n        return amountToMint;\n    }\n\n    function claimRewards(address account) external {\n        require(msg.sender == account || msg.sender == address(protocol) || msg.sender == address(lnx), \"Cannot claim for another account\");\n        if (claimableRewards(account) == 0) userClaimed[account] = lnx.totalSupply();    \n        uint rewards = claimableRewards(account);\n        mintRewards();\n        lnx.transfer(account, rewards);\n        userClaimed[account] = lnx.totalSupply();\n    }\n\n    function claimableRewards(address account) public view returns (uint) {\n        if (baseRate == 0) return 0;\n        uint mintable = (block.timestamp.sub(mintCheckpoint)).mul(baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply())));\n        uint rewards = lnx.totalSupply().add(mintable);\n        uint accountRewards = (rewards.sub(userClaimed[account])).mul(protocol.accountLentValue(account)).div(protocol.totalLentValue());\n        return accountRewards;\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/WrappedGLPManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function capSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    function claimable(address) external view returns (uint); // for fsGLP\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IProtocol {\n    // Value of a debt \"token\"\n    function debtValue(address token) external view returns (uint256);\n\n    // Interest on token since last checkpoint\n    function getTokenAccruedInterest(address token) external view returns (uint256);\n\n    // How many tokens does an user owe\n    function userDebt(address account, address token) external view returns (uint256);\n\n    // How much USD does an user owe per token\n    function userDebtUSD(address account, address token) external view returns (uint256);\n\n    // How many lent tokens is it's share token backed by\n    function getShareValue(address token) external view returns (uint256);\n\n    // How many collateral tokens is it's share token backed by\n    function getCollateralShareValue() external view returns (uint256);\n\n    // Fetch the price of an asset from Chainlink oracle\n    function getLatestPrice(address token) external view returns (uint);\n\n    // Price of GLP\n    function getCollateralPrice() external view returns (uint);\n\n    // User's health factor\n    function accountHealth(address account) external view returns (uint256);\n\n    // How much an user has borrowed in total in USD\n    function accountBorrowedValue(address account) external view returns (uint256);\n\n    // How much an user has lent in total in USD\n    function accountLentValue(address account) external view returns (uint256);\n\n    // How much is lent in total in USD\n    function totalLentValue() external view returns (uint256);\n\n    // Value of an user's collateral in USD\n    function accountCollateralValue(address account) external view returns (uint256);\n\n    // Annual interest rate of borrowing a token\n    function interestRate(address token) external view returns (uint256);\n\n    // How many tokens have been borrowed from liquidity\n    function totalBorrowedAmount(address token) external view returns (uint256);\n\n    // How many tokens can an user borrow\n    function borrowingPower(address account, address token) external view returns (uint256);\n\n    // How much can an user borrow in USD\n    function borrowingPowerUSD(address account) external view returns (uint256); \n}\n\ninterface IRewardsRouter {\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\n    function handleRewards(\n        bool _shouldClaimGmx,\n        bool _shouldStakeGmx,\n        bool _shouldClaimEsGmx,\n        bool _shouldStakeEsGmx,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth\n    ) external;\n}\n\ninterface IRewardTracker {\n    function claimable(address) external view returns (uint);\n}\n\ninterface IVault {\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint) external view returns (address);\n}\n\ninterface IGLPManager {\n    function cooldownDuration() external view returns (uint);\n}\n\ncontract WrappedGLPManager {\n\n    using SafeMath for uint;\n\n    IERC20 public WGLP; // Wrapped GLP\n    IERC20 public weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\n    IERC20 public fsGLP = IERC20(0x1aDDD80E6039594eE970E5872D247bf0414C8903);\n    IProtocol public protocol; // Lending protocol\n    address public governance;\n    bool public canWithdraw;\n    uint public checkpoint;\n    IRewardsRouter public rewardsRouter = IRewardsRouter(0xA906F338CB21815cBc4Bc87ace9e68c87eF8d8F1);\n    IGLPManager public GLPManager = IGLPManager(0x321F653eED006AD1C29D174e17d96351BDe22649);\n    IVault public vault = IVault(0x489ee077994B6658eAfA855C308275EAd8097C4A);\n    mapping(address => bool) public allowedToken;\n\n    constructor(address _protocol) {\n        protocol = IProtocol(_protocol);\n        checkpoint = block.timestamp;\n        governance = msg.sender;\n        address token;\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            token = vault.allWhitelistedTokens(i);\n            allowedToken[token] = true;\n            IERC20(token).approve(address(GLPManager), type(uint).max);\n        }\n    }\n\n    function setWGLP(address _WGLP) external {\n        require(msg.sender == governance);\n        require(address(WGLP) == address(0), \"WGLP already set\");\n        WGLP = IERC20(_WGLP);\n    }\n    \n    function withdraw(address token, uint shareAmount) external returns (uint) {\n        if(block.timestamp.sub(checkpoint) > 7200) canWithdraw = true; \n        require(canWithdraw == true, \"Cannot withdraw at this time\");\n        uint amount = shareAmount.mul(getShareValue()).div(1e18);\n        IERC20(WGLP).burn(msg.sender, shareAmount);\n        uint amountWithdrawn = rewardsRouter.unstakeAndRedeemGlp(token, amount, 1, msg.sender);\n        return amountWithdrawn;\n    }\n\n    function deposit(address token, uint amount) external {\n        require(allowedToken[token] == true, \"Token not allowed\");\n        require(amount > 0, \"Cannot deposit 0\");\n        if(canWithdraw == true) {\n            require(block.timestamp.sub(checkpoint) >= uint(10800).sub(GLPManager.cooldownDuration()), \"Cannot deposit at this time\");\n            checkpoint = block.timestamp;\n        }\n        canWithdraw = false;\n        if (WGLP.totalSupply() > 0 && fsGLP.claimable(address(this)) > 0) compound();\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n        amount = rewardsRouter.mintAndStakeGlp(token, amount, 0, 1);\n        uint amountToMint = amount.mul(1e18).div(getShareValue());\n        IERC20(WGLP).mint(msg.sender, amountToMint);\n    }\n\n    function compound() internal {\n        uint wethBefore = IERC20(weth).balanceOf(address(this));\n        rewardsRouter.handleRewards(\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            false\n        );\n        rewardsRouter.mintAndStakeGlp(\n            address(weth),\n            IERC20(weth).balanceOf(address(this)).sub(wethBefore),\n            1,\n            1\n        );\n    }\n\n    function getShareValue() public view returns (uint) {\n        if (WGLP.totalSupply() == 0) return 1e18;\n        return fsGLP.balanceOf(address(this)).mul(1e18).div(WGLP.totalSupply());\n    }\n}"
    },
    "contracts/StakeRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function capSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IVault {\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint) external view returns (address);\n}\n\ncontract StakeRewards {\n\n    using SafeMath for uint;\n\n    IERC20 public lnx; // Governance token\n    address public protocol; // Lending protocol\n    address public WGLP;\n    IVault public vault;\n    address public governance;\n    mapping(address => uint) public userStaked; // How much LNX has an user staked\n    uint public totalStaked; // LNX staked in total\n    mapping(address => mapping(address => uint)) public userClaimed; // How many tokens has an user claimed per token\n    mapping(address => uint) public tokensRewarded; // How many tokens have been sent as rewards in total per token\n\n    constructor(address _lnx, address _vault) {\n        lnx = IERC20(_lnx);\n        governance = msg.sender;\n        vault= IVault(_vault);\n    }\n\n    function setWGLP(address _WGLP) external {\n        require(msg.sender == governance);\n        WGLP = _WGLP;\n    }\n\n    function setProtocol(address _protocol) external {\n        require(msg.sender == governance);\n        protocol = _protocol;\n    }\n\n    function receiveRewards(address token, uint amount) external {\n        require(msg.sender == protocol);\n        IERC20(token).transferFrom(protocol, address(this), amount);\n        tokensRewarded[token] += amount;\n    }\n\n    function stake(uint amount) external {\n        lnx.transferFrom(msg.sender, address(this), amount);\n        totalStaked += amount;\n        userStaked[msg.sender] += amount;\n    }\n\n    function unstake(uint amount) external {\n        require(userStaked[msg.sender] >= amount);\n        totalStaked -= amount;\n        userStaked[msg.sender] -= amount;\n        lnx.transfer(msg.sender, amount);\n    }\n\n    function claimRewards(address account) external {\n        require(msg.sender == account || msg.sender == address(protocol), \"Cannot claim for another account\");\n        address token;\n        uint rewards;\n        for(uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            token = vault.allWhitelistedTokens(i);\n            if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\n            else {\n                rewards = claimableRewards(account, token);\n                IERC20(token).transfer(account, rewards);\n                userClaimed[account][token] = tokensRewarded[token];\n            }\n        }\n        token = WGLP;\n        if (claimableRewards(account, token) == 0) userClaimed[account][token] = tokensRewarded[token];\n        else{\n            rewards = claimableRewards(account, token);\n            IERC20(token).transfer(account, rewards);\n            userClaimed[account][token] = tokensRewarded[token];\n        }\n    }\n\n    function claimableRewards(address account, address token) public view returns (uint) {\n        uint rewards = tokensRewarded[token];\n        uint accountRewards = (rewards.sub(userClaimed[account][token])).mul(userStaked[account]).div(totalStaked);\n        return accountRewards;\n    }\n}"
    },
    "contracts/Protocol.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IVault {\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint) external view returns (address);\n}\n\ninterface IPriceFeed {\n    function getPrice(address, bool, bool, bool) external view returns (uint256);\n}\n\ninterface IRewardsRouter {\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\n    function handleRewards(\n        bool _shouldClaimGmx,\n        bool _shouldStakeGmx,\n        bool _shouldClaimEsGmx,\n        bool _shouldStakeEsGmx,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth\n    ) external;\n}\n\ninterface ILNXReward {\n    function claimRewards(address account) external;\n}\n\ninterface IStakeReward {\n    function receiveRewards(address token, uint amount) external;\n}\n\ninterface IGLPManager {\n    function getAumInUsdg(bool) external view returns (uint256);\n}\n\ninterface IWGLPManager {\n    function getShareValue() external view returns (uint256);\n    function canWithdraw() external view returns (bool);\n    function compound() external;\n    function withdraw(address, uint) external returns (uint256);\n}\n\ncontract Protocol {\n\n    using SafeMath for uint;\n\n    mapping(address => bool) public borrowToken; // Token allowed to be deposited/borrowed\n    mapping(address => address) public borrowShare; // Share token from lending\n    mapping(address => uint) public borrowTokenBalance; // Tracks balance of deposited tokens\n    mapping(address => uint) public initialLentAmount; // Tracks the amount of tokens borrowed initially; w/o interest, liquidations\n\n    mapping(address => uint) public decimalMultiplier; // Decimals needed to normalize to 1e18\n    mapping(address => uint) public tokenDebt; // Tracks amount of tokens owed\n    mapping(address => mapping(address => uint)) public borrowedAmount; // User debt shares\n    mapping(address => mapping(address => uint)) public initialBorrowedAmount; // User initial borrowed amount\n    mapping(address => uint) public interestCheckpoint; // Tracks token accrued interest using time\n\n    uint256 public totalCollateral; // Total WGLP deposited\n    mapping(address => uint) public userCollateral; // WGLP deposited by users\n\n    uint256 public totalPendingLiquidationUSD;\n    uint256 public totalPendingLiquidationWGLP;\n    mapping(address => uint) public tokenPendingLiquidationUSD;\n\n    address public governance;\n    IVault public vault;\n    IRewardsRouter public rewardsRouter;\n    IERC20 public WGLP;\n    IERC20 public GLP;\n    address public weth;\n    uint public ltv = 50; // 50 is 50% GLP LTV\n    address public lnxReward;\n    address public stakeReward;\n    IPriceFeed public priceFeed;\n    address public GLPManager;\n    IWGLPManager public WGLPManager;\n\n    constructor(\n        address _vault,\n        address _rewardsRouter,\n        address _GLP,\n        address _weth,\n        address _lnxReward,\n        address _stakeReward,\n        address _priceFeed,\n        address _GLPManager\n    ) {\n        governance = msg.sender;\n        vault = IVault(_vault);\n        rewardsRouter = IRewardsRouter(_rewardsRouter);\n        GLP = IERC20(_GLP);\n        weth = _weth;\n        lnxReward = _lnxReward;\n        stakeReward = _stakeReward;\n        priceFeed = IPriceFeed(_priceFeed);\n        GLPManager = _GLPManager;\n    }\n\n\n\n    // End user functions\n\n    function depositCollateral(uint256 amount) external {\n        WGLP.transferFrom(msg.sender, address(this), amount);\n        userCollateral[msg.sender] += amount;\n        totalCollateral += amount;\n    }\n\n    function withdrawCollateralAll() external {\n        require(accountBorrowedValue(msg.sender) == 0, \"Account has debt\");\n        uint amount = userCollateral[msg.sender];\n        withdrawCollateral(amount);\n    }\n\n    function withdrawCollateral(uint256 amount) public {\n        totalCollateral -= amount;\n        userCollateral[msg.sender] -= amount;\n        require(accountHealth(msg.sender) >= 1e18, \"Account not healthy after withdraw\");\n    }\n\n    function lend(address token, uint256 amount) external {\n        ILNXReward(lnxReward).claimRewards(msg.sender);\n        uint transferAmount = amount;\n        amount = amount.mul(10**(decimalMultiplier[token]));\n        require(borrowToken[token] == true, \"Token not allowed\");\n        uint amountToMint = amount.mul(1e18).div(getShareValue(token));\n        tokenDebt[token] += getTokenAccruedInterest(token);\n        interestCheckpoint[token] = block.timestamp;\n        IERC20(token).transferFrom(msg.sender, address(this), transferAmount);\n        IERC20(borrowShare[token]).mint(msg.sender, amountToMint);\n        borrowTokenBalance[token] += amount;\n    }\n\n    function withdrawAll(address token) external {\n        uint shareAmount = IERC20(borrowShare[token]).balanceOf(msg.sender);\n        withdraw(token, shareAmount);\n    }\n\n    function withdraw(address token, uint256 shareAmount) public {\n        ILNXReward(lnxReward).claimRewards(msg.sender);\n        uint amountToSend = shareAmount.mul(getShareValue(token)).div(1e18);\n        require(amountToSend > IERC20(token).balanceOf(address(this)).mul(10**decimalMultiplier[token]), \"Too much borrowed from liquidity to withdraw\");\n        IERC20(borrowShare[token]).burn(msg.sender, shareAmount);\n        borrowTokenBalance[token] -= amountToSend;\n        tokenDebt[token] += getTokenAccruedInterest(token);\n        interestCheckpoint[token] = block.timestamp;        \n        IERC20(token).transfer(msg.sender, amountToSend.div(10**decimalMultiplier[token]));\n    }\n\n    function borrow(address token, uint256 tokenAmount) external {\n        require(borrowingPower(msg.sender, token) >= tokenAmount.mul(10**decimalMultiplier[token]), \"Not enough borrowing power\");\n        tokenDebt[token] += getTokenAccruedInterest(token);\n        interestCheckpoint[token] = block.timestamp;\n        borrowedAmount[msg.sender][token] += tokenAmount.mul(uint(1e18).mul(10**decimalMultiplier[token])).div(debtValue(token));\n        initialBorrowedAmount[msg.sender][token] += tokenAmount.mul(10**decimalMultiplier[token]);\n        initialLentAmount[token] += tokenAmount.mul(10**decimalMultiplier[token]);\n        tokenDebt[token] += tokenAmount.mul(10**decimalMultiplier[token]); \n        IERC20(token).transfer(msg.sender, tokenAmount);\n    }\n\n    function repay(address token, uint256 tokenAmount) public {\n        tokenAmount = tokenAmount.mul(10**decimalMultiplier[token]);\n        uint interest = userDebt(msg.sender, token).sub(initialBorrowedAmount[msg.sender][token]);\n        uint interestPaid;\n        if (tokenAmount >= interest) {\n            interestPaid = interest;\n        }\n        else {\n            interestPaid = tokenAmount;\n        }\n        require(tokenAmount <= userDebt(msg.sender, token), \"Repaying too much\");\n        tokenDebt[token] += getTokenAccruedInterest(token);\n        interestCheckpoint[token] = block.timestamp;\n        borrowedAmount[msg.sender][token] -= tokenAmount.mul(1e18).div(debtValue(token));\n        initialBorrowedAmount[msg.sender][token] -= tokenAmount.sub(interestPaid);\n        initialLentAmount[token] -= tokenAmount.sub(interestPaid);\n        tokenDebt[token] -= tokenAmount;\n        IERC20(token).transferFrom(msg.sender, address(this), tokenAmount.div(10**decimalMultiplier[token]));\n        IStakeReward(stakeReward).receiveRewards(token, interestPaid.div(4).div(10**decimalMultiplier[token]));\n        borrowTokenBalance[token] += interestPaid.mul(3).div(4);\n    }\n\n    function repayAll(address token) external {\n        repay(token, userDebt(msg.sender, token).div(10**decimalMultiplier[token]));\n    }\n\n    function liquidate(address account) external {\n        require(accountHealth(account) < 1e18, \"Account healthy\");\n        uint256 amount = userCollateral[account];\n        userCollateral[account] = 0;\n        totalPendingLiquidationWGLP = totalPendingLiquidationWGLP.add(amount.mul(9).div(10));\n        totalCollateral = totalCollateral.sub(amount);\n        WGLP.transfer(msg.sender, amount.mul(5).div(100));\n        IStakeReward(stakeReward).receiveRewards(address(WGLP), amount.mul(5).div(100));\n        address token;\n        uint tokenDebtAmountUSD;\n        uint tokenDebtAmount;\n        uint allWhitelistedTokensLength = vault.allWhitelistedTokensLength();\n        uint amountWithdrawn;\n        for(uint i=0; i<allWhitelistedTokensLength; i++) {\n            token = vault.allWhitelistedTokens(i);\n            tokenDebt[token] = tokenDebt[token].add(getTokenAccruedInterest(token));\n            interestCheckpoint[token] = block.timestamp;\n            tokenDebtAmountUSD = userDebtUSD(account, token);\n            tokenDebtAmount = userDebt(account, token);\n            if(tokenDebtAmountUSD > 0) {\n                tokenDebt[token] = tokenDebt[token].sub(tokenDebtAmount);\n                initialLentAmount[token] = initialLentAmount[token].sub(tokenDebtAmount);\n                borrowedAmount[account][token] = 0;\n                initialBorrowedAmount[account][token] = 0;\n                tokenPendingLiquidationUSD[token] = tokenPendingLiquidationUSD[token].add(tokenDebtAmountUSD);\n                totalPendingLiquidationUSD = totalPendingLiquidationUSD.add(tokenDebtAmountUSD);\n            }\n        }\n        if(WGLPManager.canWithdraw() == true) {\n            for(uint j=0; j<allWhitelistedTokensLength; j++) {\n                token = vault.allWhitelistedTokens(j);\n                if(tokenPendingLiquidationUSD[token] > 0) {\n                    amountWithdrawn = WGLPManager.withdraw(token, totalPendingLiquidationWGLP.mul(tokenPendingLiquidationUSD[token]).div(totalPendingLiquidationUSD));\n                    borrowTokenBalance[token] = borrowTokenBalance[token].add(amountWithdrawn.mul(10**decimalMultiplier[token]));\n                    tokenPendingLiquidationUSD[token] = 0;\n                }\n            }\n            totalPendingLiquidationUSD = 0;\n            totalPendingLiquidationWGLP = 0;\n        }\n    }\n\n\n\n    // Governance functions\n\n    function setGovernance(address _governance) external {\n        require(msg.sender == governance, \"!Governance\");\n        governance = _governance;\n    }\n\n    function setBorrowToken(address token, address share) external {\n        require(msg.sender == governance, \"!Governance\");\n        require(borrowShare[token] == address(0), \"!Governance\");\n        borrowShare[token] = share;\n        borrowToken[token] = true;\n        decimalMultiplier[token] = uint(18).sub(IERC20(token).decimals());\n        IERC20(token).approve(GLPManager, type(uint).max);\n        IERC20(token).approve(stakeReward, type(uint).max);\n    }\n\n    function setBorrowTokenAllowed(address token, bool allowed) external {\n        require(msg.sender == governance, \"!Governance\");\n        borrowToken[token] = allowed;\n    }\n\n    function setltv(uint _ltv) external {\n        require(msg.sender == governance, \"!Governance\");\n        require(_ltv <= 90 && _ltv >= 50, \"Invalid LTV\"); // Decreasing LTV can cause unfair liquidations, careful\n        ltv = _ltv;\n    }\n\n    function setWGLP(address _WGLP) external {\n        require(msg.sender == governance, \"!Governance\");\n        require(address(WGLP) == address(0), \"WGLP already set!\");\n        WGLP = IERC20(_WGLP);\n        WGLP.approve(stakeReward, type(uint).max);\n        WGLP.approve(address(WGLPManager), type(uint).max);\n    }\n\n    function setWGLPManager(address _WGLPManager) external {\n        require(msg.sender == governance);\n        require(address(WGLPManager) == address(0));\n        WGLPManager = IWGLPManager(_WGLPManager);\n    }\n\n    function rescueExcess(address token) external { // Used to rescue tokens sent to this contract without a purpose\n        require(msg.sender == governance);\n        require(token != address(WGLP));\n        uint amount = (IERC20(token).balanceOf(address(this))).sub(borrowTokenBalance[token].sub(initialLentAmount[token]));\n        require(amount > 0, \"Nothing to rescue\");\n        IERC20(token).transfer(governance, amount);\n    }\n\n\n\n    // View functions\n\n    // Value of a debt \"token\"\n    function debtValue(address token) public view returns (uint256) { // 1e18 precision\n        if (totalBorrowedAmount(token) == 0) return 1e18;\n        return (tokenDebt[token].add(getTokenAccruedInterest(token))).mul(1e18).div(totalBorrowedAmount(token));\n    }\n\n    // Tokens owed in total\n    function totalTokenDebt(address token) public view returns (uint256) { // 1e18 precision\n        return tokenDebt[token].add(getTokenAccruedInterest(token));\n    }\n\n    // Interest on token since last checkpoint\n    function getTokenAccruedInterest(address token) public view returns (uint256) { // 1e18 precision\n        uint secondsBorrowed = block.timestamp.sub(interestCheckpoint[token]);\n        uint interest = tokenDebt[token].mul(interestRate(token)).mul(secondsBorrowed).div(1e18).div(31536000); // 31536000 seconds in a year\n        return interest;\n    }\n\n    // How many tokens does an user owe\n    function userDebt(address account, address token) public view returns (uint256) {\n        return borrowedAmount[account][token].mul(debtValue(token)).div(1e18);\n    }\n\n    // How much USD does an user owe per token\n    function userDebtUSD(address account, address token) public view returns (uint256) {\n        return userDebt(account, token).mul(getLatestPrice(token)).div(1e18);\n    }\n\n    // How many lent tokens is it's share token backed by\n    function getShareValue(address token) public view returns (uint256) {\n        if (IERC20(borrowShare[token]).totalSupply() == 0) return 1e18;\n        return borrowTokenBalance[token].mul(1e18).div(IERC20(borrowShare[token]).totalSupply());\n    }\n\n    // How many collateral tokens is it's share token backed by\n    function getCollateralShareValue() public view returns(uint256) { // 1e18 precision\n        return WGLPManager.getShareValue();\n    }\n\n    // Fetch the price of an asset from GMX price feed contract\n    function getLatestPrice(address token) private view returns (uint) {\n        uint price = priceFeed.getPrice(token, false, true, false);\n        return price.div(1e12); // Normalize to 1e18\n    }\n\n    // Price of GLP\n    function getCollateralPrice() public view returns (uint) { // 1e18 precision\n        return IGLPManager(GLPManager).getAumInUsdg(true).mul(1e18).div(IERC20(GLP).totalSupply());\n    }\n\n    // User's health factor\n    function accountHealth(address account) public view returns (uint256) { // 1e18 precision\n        if (accountBorrowedValue(account) == 0) return 100e18;\n        if (accountCollateralValue(account).mul(1e18).div(accountBorrowedValue(account)) > 100e18) return 100e18;\n        return accountCollateralValue(account).mul(1e18).div(accountBorrowedValue(account));\n    }\n\n    // How much an user has borrowed in total in USD\n    function accountBorrowedValue(address account) public view returns (uint256) { // 1e18 precision\n        uint totalBorrowedValue;\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            totalBorrowedValue += userDebt(account, vault.allWhitelistedTokens(i)).mul(getLatestPrice(vault.allWhitelistedTokens(i))).div(1e18);\n        }  \n        return totalBorrowedValue;      \n    }\n\n    // How much an user has lent in total in USD\n    function accountLentValue(address account) public view returns (uint256) { // 1e18 precision\n        uint accountValue;\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            address token = vault.allWhitelistedTokens(i);\n            accountValue += borrowTokenBalance[token]\n            .mul(IERC20(borrowShare[token]).balanceOf(account))\n            .mul(getShareValue(token))\n            .mul(getLatestPrice(token))\n            .div(1e54);\n        }  \n        return accountValue;      \n    }\n\n    // How much is lent in total in USD\n    function totalLentValue() public view returns (uint256) { // 1e18 precision\n        uint total;\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            address token = vault.allWhitelistedTokens(i);\n            total += borrowTokenBalance[token]\n            .mul(getLatestPrice(token))\n            .div(1e18);\n        }  \n        return total;      \n    }\n\n    // Value of an user's collateral in USD\n    function accountCollateralValue(address account) public view returns (uint256) { // 1e18 precision\n        uint totalCollateralValue = userCollateral[account].mul(getCollateralShareValue()).mul(getCollateralPrice()).mul(ltv).div(1e36).div(100);\n        return totalCollateralValue;\n    }\n\n    // Annual interest rate of borrowing a token\n    function interestRate(address token) public view returns (uint256) { // 1e18 precision, %annual\n        return totalBorrowedAmount(token).mul(1e18).div(borrowTokenBalance[token]);\n    }\n\n    // How many tokens have been borrowed from liquidity\n    function totalBorrowedAmount(address token) public view returns (uint256) {\n        return initialLentAmount[token];\n    }\n\n    // How many tokens can an user borrow\n    function borrowingPower(address account, address token) public view returns (uint256) {\n        if (accountBorrowedValue(account) > accountCollateralValue(account)) return 0;\n        return (accountCollateralValue(account).sub(accountBorrowedValue(account))).mul(1e18).div(getLatestPrice(token));\n    }\n\n    // How much can an user borrow in USD\n    function borrowingPowerUSD(address account) public view returns (uint256) {\n        if (accountBorrowedValue(account) > accountCollateralValue(account)) return 0;\n        return accountCollateralValue(account).sub(accountBorrowedValue(account));\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}