{
  "language": "Solidity",
  "sources": {
    "contracts/WrappedGLPManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function capSupply() external view returns (uint256);\n    function decimals() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    function mint(address account, uint256 amount) external;\n    function burn(address account, uint256 amount) external;\n    function claimable(address) external view returns (uint); // for fsGLP\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IProtocol {\n    // Value of a debt \"token\"\n    function debtValue(address token) external view returns (uint256);\n\n    // Interest on token since last checkpoint\n    function getTokenAccruedInterest(address token) external view returns (uint256);\n\n    // How many tokens does an user owe\n    function userDebt(address account, address token) external view returns (uint256);\n\n    // How much USD does an user owe per token\n    function userDebtUSD(address account, address token) external view returns (uint256);\n\n    // How many lent tokens is it's share token backed by\n    function getShareValue(address token) external view returns (uint256);\n\n    // How many collateral tokens is it's share token backed by\n    function getCollateralShareValue() external view returns (uint256);\n\n    // Fetch the price of an asset from Chainlink oracle\n    function getLatestPrice(address token) external view returns (uint);\n\n    // Price of GLP\n    function getCollateralPrice() external view returns (uint);\n\n    // User's health factor\n    function accountHealth(address account) external view returns (uint256);\n\n    // How much an user has borrowed in total in USD\n    function accountBorrowedValue(address account) external view returns (uint256);\n\n    // How much an user has lent in total in USD\n    function accountLentValue(address account) external view returns (uint256);\n\n    // How much is lent in total in USD\n    function totalLentValue() external view returns (uint256);\n\n    // Value of an user's collateral in USD\n    function accountCollateralValue(address account) external view returns (uint256);\n\n    // Annual interest rate of borrowing a token\n    function interestRate(address token) external view returns (uint256);\n\n    // How many tokens have been borrowed from liquidity\n    function totalBorrowedAmount(address token) external view returns (uint256);\n\n    // How many tokens can an user borrow\n    function borrowingPower(address account, address token) external view returns (uint256);\n\n    // How much can an user borrow in USD\n    function borrowingPowerUSD(address account) external view returns (uint256); \n}\n\ninterface IRewardsRouter {\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns (uint256);\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns (uint256);\n    function handleRewards(\n        bool _shouldClaimGmx,\n        bool _shouldStakeGmx,\n        bool _shouldClaimEsGmx,\n        bool _shouldStakeEsGmx,\n        bool _shouldStakeMultiplierPoints,\n        bool _shouldClaimWeth,\n        bool _shouldConvertWethToEth\n    ) external;\n}\n\ninterface IRewardTracker {\n    function claimable(address) external view returns (uint);\n}\n\ninterface IVault {\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint) external view returns (address);\n}\n\ninterface IGLPManager {\n    function cooldownDuration() external view returns (uint);\n}\n\ncontract WrappedGLPManager {\n\n    using SafeMath for uint;\n\n    IERC20 public WGLP; // Wrapped GLP\n    IERC20 public weth = IERC20(0x82aF49447D8a07e3bd95BD0d56f35241523fBab1);\n    IERC20 public fsGLP = IERC20(0x1aDDD80E6039594eE970E5872D247bf0414C8903);\n    IProtocol public protocol; // Lending protocol\n    address public governance;\n    bool public canWithdraw;\n    uint public checkpoint;\n    IRewardsRouter public rewardsRouter = IRewardsRouter(0xA906F338CB21815cBc4Bc87ace9e68c87eF8d8F1);\n    IGLPManager public GLPManager = IGLPManager(0x321F653eED006AD1C29D174e17d96351BDe22649);\n    IVault public vault = IVault(0x489ee077994B6658eAfA855C308275EAd8097C4A);\n    mapping(address => bool) public allowedToken;\n\n    constructor(address _protocol) {\n        protocol = IProtocol(_protocol);\n        checkpoint = block.timestamp;\n        governance = msg.sender;\n        address token;\n        for (uint i=0; i<vault.allWhitelistedTokensLength(); i++) {\n            token = vault.allWhitelistedTokens(i);\n            allowedToken[token] = true;\n            IERC20(token).approve(address(GLPManager), type(uint).max);\n        }\n    }\n\n    function setWGLP(address _WGLP) external {\n        require(msg.sender == governance);\n        require(address(WGLP) == address(0), \"WGLP already set\");\n        WGLP = IERC20(_WGLP);\n    }\n    \n    function withdraw(address token, uint shareAmount) external returns (uint) {\n        if(block.timestamp.sub(checkpoint) > 7200) canWithdraw = true; \n        require(canWithdraw == true, \"Cannot withdraw at this time\");\n        uint amount = shareAmount.mul(getShareValue()).div(1e18);\n        IERC20(WGLP).burn(msg.sender, shareAmount);\n        uint amountWithdrawn = rewardsRouter.unstakeAndRedeemGlp(token, amount, 1, msg.sender);\n        return amountWithdrawn;\n    }\n\n    function deposit(address token, uint amount) external {\n        require(allowedToken[token] == true, \"Token not allowed\");\n        require(amount > 0, \"Cannot deposit 0\");\n        if(canWithdraw == true) {\n            require(block.timestamp.sub(checkpoint) >= uint(10800).sub(GLPManager.cooldownDuration()), \"Cannot deposit at this time\");\n            checkpoint = block.timestamp;\n        }\n        canWithdraw = false;\n        if (WGLP.totalSupply() > 0 && fsGLP.claimable(address(this)) > 0) compound();\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\n        amount = rewardsRouter.mintAndStakeGlp(token, amount, 0, 1);\n        uint amountToMint = amount.mul(1e18).div(getShareValue());\n        IERC20(WGLP).mint(msg.sender, amountToMint);\n    }\n\n    function compound() internal {\n        uint wethBefore = IERC20(weth).balanceOf(address(this));\n        rewardsRouter.handleRewards(\n            false,\n            false,\n            true,\n            true,\n            true,\n            true,\n            false\n        );\n        rewardsRouter.mintAndStakeGlp(\n            address(weth),\n            IERC20(weth).balanceOf(address(this)).sub(wethBefore),\n            1,\n            1\n        );\n    }\n\n    function getShareValue() public view returns (uint) {\n        if (WGLP.totalSupply() == 0) return 1e18;\n        return fsGLP.balanceOf(address(this)).mul(1e18).div(WGLP.totalSupply());\n    }\n}"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}