{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lnx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract IProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xbb98510162f86c298b5c59535e6696b874ab91504370bf11fe60653e0d0bbca9",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "670280",
    "logsBloom": "0x
    "blockHash": "0xd320d67140acb0ca78bc29be52c6b4c88e1f070be332387a87549b993ca0b58e",
    "transactionHash": "0xbb98510162f86c298b5c59535e6696b874ab91504370bf11fe60653e0d0bbca9",
    "logs": [],
    "blockNumber": 4407366,
    "cumulativeGasUsed": "670280",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "1e9ca5e654e202500e8458b7cff1e5eb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LNXRewards.sol\":\"LNXRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/LNXRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IProtocol {\\n    // Value of a debt \\\"token\\\"\\n    function debtValue(address token) external view returns (uint256);\\n\\n    // Interest on token since last checkpoint\\n    function getTokenAccruedInterest(address token) external view returns (uint256);\\n\\n    // How many tokens does an user owe\\n    function userDebt(address account, address token) external view returns (uint256);\\n\\n    // How much USD does an user owe per token\\n    function userDebtUSD(address account, address token) external view returns (uint256);\\n\\n    // How many lent tokens is it's share token backed by\\n    function getShareValue(address token) external view returns (uint256);\\n\\n    // How many collateral tokens is it's share token backed by\\n    function getCollateralShareValue() external view returns (uint256);\\n\\n    // Fetch the price of an asset from oracle\\n    function getLatestPrice(address token) external view returns (uint);\\n\\n    // Price of GLP\\n    function getCollateralPrice() external view returns (uint);\\n\\n    // User's health factor\\n    function accountHealth(address account) external view returns (uint256);\\n\\n    // How much an user has borrowed in total in USD\\n    function accountBorrowedValue(address account) external view returns (uint256);\\n\\n    // How much an user has lent in total in USD\\n    function accountLentValue(address account) external view returns (uint256);\\n\\n    // How much is lent in total in USD\\n    function totalLentValue() external view returns (uint256);\\n\\n    // Value of an user's collateral in USD\\n    function accountCollateralValue(address account) external view returns (uint256);\\n\\n    // Annual interest rate of borrowing a token\\n    function interestRate(address token) external view returns (uint256);\\n\\n    // How many tokens have been borrowed from liquidity\\n    function totalBorrowedAmount(address token) external view returns (uint256);\\n\\n    // How many tokens can an user borrow\\n    function borrowingPower(address account, address token) external view returns (uint256);\\n\\n    // How much can an user borrow in USD\\n    function borrowingPowerUSD(address account) external view returns (uint256); \\n}\\n\\ncontract LNXRewards {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public lnx; // Governance token\\n    uint256 public mintCheckpoint;\\n    uint256 public baseRate; // Wei per second\\n    IProtocol public protocol; // Lending protocol\\n    address public governance;\\n    mapping(address => uint) public userClaimed; // How many tokens has an user claimed\\n\\n    constructor(address _lnx) {\\n        lnx = IERC20(_lnx);\\n        governance = msg.sender;\\n    }\\n\\n    function startRewards() external {\\n        require(msg.sender == governance && baseRate == 0);\\n        mintRewards();\\n        baseRate = 1e16; // 0.01 LNX per second\\n    }\\n\\n    function setProtocol(address _protocol) external {\\n        require(msg.sender == governance);\\n        protocol = IProtocol(_protocol);\\n    }\\n\\n    function mintRewards() internal returns (uint256) {\\n        uint amountToMint = 0;\\n        if (baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()) <= 1e16) {\\n            uint rate = baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()));\\n            amountToMint = (block.timestamp.sub(mintCheckpoint)).mul(rate);    \\n        }\\n        lnx.mint(address(this), amountToMint);\\n        mintCheckpoint = block.timestamp;\\n        return amountToMint;\\n    }\\n\\n    function claimRewards(address account) external {\\n        require(msg.sender == account || msg.sender == address(protocol) || msg.sender == address(lnx), \\\"Cannot claim for another account\\\");\\n        if (claimableRewards(account) == 0) userClaimed[account] = lnx.totalSupply();    \\n        uint rewards = claimableRewards(account);\\n        mintRewards();\\n        lnx.transfer(account, rewards);\\n        userClaimed[account] = lnx.totalSupply();\\n    }\\n\\n    function claimableRewards(address account) public view returns (uint) {\\n        if (baseRate == 0) return 0;\\n        uint mintable = (block.timestamp.sub(mintCheckpoint)).mul(baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply())));\\n        uint rewards = lnx.totalSupply().add(mintable);\\n        uint accountRewards = (rewards.sub(userClaimed[account])).mul(protocol.accountLentValue(account)).div(protocol.totalLentValue());\\n        return accountRewards;\\n    }\\n}\",\"keccak256\":\"0xe49214e648089178f6080a4c4d53619b983eecc5a2c548919da3c65720b733cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610af8380380610af883398101604081905261002f9161005d565b600080546001600160a01b039092166001600160a01b0319928316179055600480549091163317905561008d565b60006020828403121561006f57600080fd5b81516001600160a01b038116811461008657600080fd5b9392505050565b610a5c8061009c6000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80635aa6e67511610076578063906c78bb1161005b578063906c78bb14610163578063dc01f60d14610176578063ef5cfb8c1461018957600080fd5b80635aa6e675146101255780638ce744261461015057600080fd5b80631f68f20a116100a75780631f68f20a146100f45780632dfd0bdc146100fd5780633b7fcdca1461010557600080fd5b80630a9d793d146100c357806314201289146100d8575b600080fd5b6100d66100d136600461093c565b61019c565b005b6100e160015481565b6040519081526020015b60405180910390f35b6100e160025481565b6100d66101ed565b6100e161011336600461093c565b60056020526000908152604090205481565b600454610138906001600160a01b031681565b6040516001600160a01b0390911681526020016100eb565b600354610138906001600160a01b031681565b600054610138906001600160a01b031681565b6100e161018436600461093c565b610226565b6100d661019736600461093c565b610526565b6004546001600160a01b031633146101b357600080fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6004546001600160a01b0316331480156102075750600254155b61021057600080fd5b61021861079e565b50662386f26fc10000600255565b60006002546000141561023b57506000919050565b600061036f61035b61035260008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb9190610965565b600054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905161034c926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610965565b60025490610905565b90610918565b60025490610924565b600154610369904290610924565b90610905565b905060006103f28260008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610965565b90610930565b9050600061051d600360009054906101000a90046001600160a01b03166001600160a01b031663d196943c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610965565b6003546040517f4414e1af0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015261034c921690634414e1af90602401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190610965565b6001600160a01b038916600090815260056020526040902054610369908790610924565b95945050505050565b336001600160a01b038216148061054757506003546001600160a01b031633145b8061055c57506000546001600160a01b031633145b6105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74604482015260640160405180910390fd5b6105cf81610226565b6106625760008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190610965565b6001600160a01b0382166000908152600560205260409020555b600061066d82610226565b905061067761079e565b506000546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610708919061097e565b5060008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190610965565b6001600160a01b0390921660009081526005602052604090209190915550565b60008060009050662386f26fc1000061080160008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b1161087e57600061085f61035260008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b905061087a816103696001544261092490919063ffffffff16565b9150505b6000546040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b505042600155509092915050565b600061091182846109b6565b9392505050565b600061091182846109d5565b600061091182846109f7565b60006109118284610a0e565b60006020828403121561094e57600080fd5b81356001600160a01b038116811461091157600080fd5b60006020828403121561097757600080fd5b5051919050565b60006020828403121561099057600080fd5b8151801515811461091157600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156109d0576109d06109a0565b500290565b6000826109f257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610a0957610a096109a0565b500390565b60008219821115610a2157610a216109a0565b50019056fea2646970667358221220646d9587e99a86f9a4cf42331f0e5fdb3171220f1eb1986bf726da1553e7c07e64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80635aa6e67511610076578063906c78bb1161005b578063906c78bb14610163578063dc01f60d14610176578063ef5cfb8c1461018957600080fd5b80635aa6e675146101255780638ce744261461015057600080fd5b80631f68f20a116100a75780631f68f20a146100f45780632dfd0bdc146100fd5780633b7fcdca1461010557600080fd5b80630a9d793d146100c357806314201289146100d8575b600080fd5b6100d66100d136600461093c565b61019c565b005b6100e160015481565b6040519081526020015b60405180910390f35b6100e160025481565b6100d66101ed565b6100e161011336600461093c565b60056020526000908152604090205481565b600454610138906001600160a01b031681565b6040516001600160a01b0390911681526020016100eb565b600354610138906001600160a01b031681565b600054610138906001600160a01b031681565b6100e161018436600461093c565b610226565b6100d661019736600461093c565b610526565b6004546001600160a01b031633146101b357600080fd5b600380547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6004546001600160a01b0316331480156102075750600254155b61021057600080fd5b61021861079e565b50662386f26fc10000600255565b60006002546000141561023b57506000919050565b600061036f61035b61035260008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb9190610965565b600054604080517f18160ddd000000000000000000000000000000000000000000000000000000008152905161034c926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa15801561031f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103439190610965565b60025490610905565b90610918565b60025490610924565b600154610369904290610924565b90610905565b905060006103f28260008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ec9190610965565b90610930565b9050600061051d600360009054906101000a90046001600160a01b03166001600160a01b031663d196943c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561044c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104709190610965565b6003546040517f4414e1af0000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015261034c921690634414e1af90602401602060405180830381865afa1580156104d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f99190610965565b6001600160a01b038916600090815260056020526040902054610369908790610924565b95945050505050565b336001600160a01b038216148061054757506003546001600160a01b031633145b8061055c57506000546001600160a01b031633145b6105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74604482015260640160405180910390fd5b6105cf81610226565b6106625760008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610624573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106489190610965565b6001600160a01b0382166000908152600560205260409020555b600061066d82610226565b905061067761079e565b506000546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490529091169063a9059cbb906044016020604051808303816000875af11580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610708919061097e565b5060008054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077e9190610965565b6001600160a01b0390921660009081526005602052604090209190915550565b60008060009050662386f26fc1000061080160008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b1161087e57600061085f61035260008054906101000a90046001600160a01b03166001600160a01b031663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610297573d6000803e3d6000fd5b905061087a816103696001544261092490919063ffffffff16565b9150505b6000546040517f40c10f19000000000000000000000000000000000000000000000000000000008152306004820152602481018390526001600160a01b03909116906340c10f1990604401600060405180830381600087803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b505042600155509092915050565b600061091182846109b6565b9392505050565b600061091182846109d5565b600061091182846109f7565b60006109118284610a0e565b60006020828403121561094e57600080fd5b81356001600160a01b038116811461091157600080fd5b60006020828403121561097757600080fd5b5051919050565b60006020828403121561099057600080fd5b8151801515811461091157600080fd5b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156109d0576109d06109a0565b500290565b6000826109f257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015610a0957610a096109a0565b500390565b60008219821115610a2157610a216109a0565b50019056fea2646970667358221220646d9587e99a86f9a4cf42331f0e5fdb3171220f1eb1986bf726da1553e7c07e64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 531,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "lnx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)405"
      },
      {
        "astId": 533,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "mintCheckpoint",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 535,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "baseRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 538,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "protocol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IProtocol)525"
      },
      {
        "astId": 540,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 544,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "userClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)405": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocol)525": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}