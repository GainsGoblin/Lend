{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lnx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "baseRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "claimableRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lnx",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintCheckpoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocol",
      "outputs": [
        {
          "internalType": "contract IProtocol",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocol",
          "type": "address"
        }
      ],
      "name": "setProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe84a26f40dfc74743ea7c8553b8b8303a0af83d1df8463e33266cbda43334b62",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1180958",
    "logsBloom": "0x
    "blockHash": "0xbc5ef76163470dbd98d89594b3314abfb004909fd5a37c353ac01efe5a03ea4b",
    "transactionHash": "0xe84a26f40dfc74743ea7c8553b8b8303a0af83d1df8463e33266cbda43334b62",
    "logs": [],
    "blockNumber": 4020286,
    "cumulativeGasUsed": "1180958",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "solcInputHash": "c0e1eb311b3b3e43f64d5ac4d6cb7f0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lnx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"baseRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"claimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lnx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintCheckpoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocol\",\"outputs\":[{\"internalType\":\"contract IProtocol\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocol\",\"type\":\"address\"}],\"name\":\"setProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LNXRewards.sol\":\"LNXRewards\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x29c462775f5b4c76dce400f120f3530aa3f81da42c839f975dc2b64784d22434\",\"license\":\"MIT\"},\"contracts/LNXRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function capSupply() external view returns (uint256);\\n    function decimals() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n    function mint(address account, uint256 amount) external;\\n    function burn(address account, uint256 amount) external;\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ninterface IProtocol {\\n    // Value of a debt \\\"token\\\"\\n    function debtValue(address token) external view returns (uint256);\\n\\n    // Interest on token since last checkpoint\\n    function getTokenAccruedInterest(address token) external view returns (uint256);\\n\\n    // How many tokens does an user owe\\n    function userDebt(address account, address token) external view returns (uint256);\\n\\n    // How much USD does an user owe per token\\n    function userDebtUSD(address account, address token) external view returns (uint256);\\n\\n    // How many lent tokens is it's share token backed by\\n    function getShareValue(address token) external view returns (uint256);\\n\\n    // How many collateral tokens is it's share token backed by\\n    function getCollateralShareValue() external view returns (uint256);\\n\\n    // Fetch the price of an asset from oracle\\n    function getLatestPrice(address token) external view returns (uint);\\n\\n    // Price of GLP\\n    function getCollateralPrice() external view returns (uint);\\n\\n    // User's health factor\\n    function accountHealth(address account) external view returns (uint256);\\n\\n    // How much an user has borrowed in total in USD\\n    function accountBorrowedValue(address account) external view returns (uint256);\\n\\n    // How much an user has lent in total in USD\\n    function accountLentValue(address account) external view returns (uint256);\\n\\n    // How much is lent in total in USD\\n    function totalLentValue() external view returns (uint256);\\n\\n    // Value of an user's collateral in USD\\n    function accountCollateralValue(address account) external view returns (uint256);\\n\\n    // Annual interest rate of borrowing a token\\n    function interestRate(address token) external view returns (uint256);\\n\\n    // How many tokens have been borrowed from liquidity\\n    function totalBorrowedAmount(address token) external view returns (uint256);\\n\\n    // How many tokens can an user borrow\\n    function borrowingPower(address account, address token) external view returns (uint256);\\n\\n    // How much can an user borrow in USD\\n    function borrowingPowerUSD(address account) external view returns (uint256); \\n}\\n\\ncontract LNXRewards {\\n\\n    using SafeMath for uint;\\n\\n    IERC20 public lnx; // Governance token\\n    uint256 public mintCheckpoint;\\n    uint256 public baseRate; // Wei per second\\n    IProtocol public protocol; // Lending protocol\\n    address public governance;\\n    mapping(address => uint) public userClaimed; // How many tokens has an user claimed\\n\\n    constructor(address _lnx) {\\n        lnx = IERC20(_lnx);\\n        governance = msg.sender;\\n    }\\n\\n    function startRewards() external {\\n        require(msg.sender == governance && baseRate == 0);\\n        mintRewards();\\n        baseRate = 1e16; // 0.01 LNX per second\\n    }\\n\\n    function setProtocol(address _protocol) external {\\n        require(msg.sender == governance);\\n        protocol = IProtocol(_protocol);\\n    }\\n\\n    function mintRewards() internal returns (uint256) {\\n        uint amountToMint = 0;\\n        if (baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()) <= 1e16) {\\n            uint rate = baseRate.sub(baseRate.mul(lnx.totalSupply()).div(lnx.capSupply()));\\n            amountToMint = (block.timestamp.sub(mintCheckpoint)).mul(rate);    \\n        }\\n        lnx.mint(address(this), amountToMint);\\n        mintCheckpoint = block.timestamp;\\n        return amountToMint;\\n    }\\n\\n    function claimRewards(address account) external {\\n        require(msg.sender == account || msg.sender == address(protocol) || msg.sender == address(lnx), \\\"Cannot claim for another account\\\");\\n        mintRewards();\\n        if (claimableRewards(account) == 0) userClaimed[account] = lnx.totalSupply();    \\n        uint rewards = claimableRewards(account);\\n        lnx.transfer(account, rewards);\\n        userClaimed[account] = lnx.totalSupply();\\n    }\\n\\n    function claimableRewards(address account) public view returns (uint) {\\n        if (baseRate == 0) return 0;\\n        uint mintable = (block.timestamp.sub(mintCheckpoint)).mul(baseRate.mul(lnx.capSupply()).div(lnx.totalSupply().mul(10000)));\\n        uint rewards = lnx.totalSupply().add(mintable);\\n        uint accountRewards = (rewards.sub(userClaimed[account])).mul(protocol.accountLentValue(account)).div(protocol.totalLentValue());\\n        return accountRewards;\\n    }\\n}\",\"keccak256\":\"0x5ea444ffc8578968e38b2d3a65e456f09a970ccc7989f293445fc707b9f58e98\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014f1380380620014f1833981810160405281019062000037919062000129565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f182620000c4565b9050919050565b6200010381620000e4565b81146200010f57600080fd5b50565b6000815190506200012381620000f8565b92915050565b600060208284031215620001425762000141620000bf565b5b6000620001528482850162000112565b91505092915050565b611386806200016b6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80635aa6e675116100665780635aa6e675146101355780638ce7442614610153578063906c78bb14610171578063dc01f60d1461018f578063ef5cfb8c146101bf5761009e565b80630a9d793d146100a357806314201289146100bf5780631f68f20a146100dd5780632dfd0bdc146100fb5780633b7fcdca14610105575b600080fd5b6100bd60048036038101906100b89190610f38565b6101db565b005b6100c7610279565b6040516100d49190610f7e565b60405180910390f35b6100e561027f565b6040516100f29190610f7e565b60405180910390f35b610103610285565b005b61011f600480360381019061011a9190610f38565b610306565b60405161012c9190610f7e565b60405180910390f35b61013d61031e565b60405161014a9190610fa8565b60405180910390f35b61015b610344565b6040516101689190611022565b60405180910390f35b61017961036a565b604051610186919061105e565b60405180910390f35b6101a960048036038101906101a49190610f38565b61038e565b6040516101b69190610f7e565b60405180910390f35b6101d960048036038101906101d49190610f38565b61077a565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023557600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156102e457506000600254145b6102ed57600080fd5b6102f5610b05565b50662386f26fc10000600281905550565b60056020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060025414156103a35760009050610775565b60006105226104ff61044e61271060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044091906110a5565b610e7d90919063ffffffff16565b6104f160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b61051460015442610ea990919063ffffffff16565b610e7d90919063ffffffff16565b905060006105c78260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b991906110a5565b610ebf90919063ffffffff16565b9050600061076c600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d196943c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906110a5565b61075e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634414e1af896040518263ffffffff1660e01b81526004016106bd9190610fa8565b602060405180830381865afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906110a5565b610750600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610ea990919063ffffffff16565b610e7d90919063ffffffff16565b610e9390919063ffffffff16565b90508093505050505b919050565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108015750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610857575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d9061112f565b60405180910390fd5b61089e610b05565b5060006108aa8261038e565b14156109835760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906110a5565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600061098e8261038e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016109eb92919061114f565b6020604051808303816000875af1158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e91906111b0565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906110a5565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060009050662386f26fc10000610c5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba691906110a5565b610c4960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3891906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b11610de2576000610db5610da460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf391906110a5565b610d9660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8591906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b600254610ea990919063ffffffff16565b9050610dde81610dd060015442610ea990919063ffffffff16565b610e7d90919063ffffffff16565b9150505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610e3d92919061114f565b600060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b50505050426001819055508091505090565b60008183610e8b919061120c565b905092915050565b60008183610ea19190611295565b905092915050565b60008183610eb791906112c6565b905092915050565b60008183610ecd91906112fa565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0582610eda565b9050919050565b610f1581610efa565b8114610f2057600080fd5b50565b600081359050610f3281610f0c565b92915050565b600060208284031215610f4e57610f4d610ed5565b5b6000610f5c84828501610f23565b91505092915050565b6000819050919050565b610f7881610f65565b82525050565b6000602082019050610f936000830184610f6f565b92915050565b610fa281610efa565b82525050565b6000602082019050610fbd6000830184610f99565b92915050565b6000819050919050565b6000610fe8610fe3610fde84610eda565b610fc3565b610eda565b9050919050565b6000610ffa82610fcd565b9050919050565b600061100c82610fef565b9050919050565b61101c81611001565b82525050565b60006020820190506110376000830184611013565b92915050565b600061104882610fef565b9050919050565b6110588161103d565b82525050565b6000602082019050611073600083018461104f565b92915050565b61108281610f65565b811461108d57600080fd5b50565b60008151905061109f81611079565b92915050565b6000602082840312156110bb576110ba610ed5565b5b60006110c984828501611090565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b60006111196020836110d2565b9150611124826110e3565b602082019050919050565b600060208201905081810360008301526111488161110c565b9050919050565b60006040820190506111646000830185610f99565b6111716020830184610f6f565b9392505050565b60008115159050919050565b61118d81611178565b811461119857600080fd5b50565b6000815190506111aa81611184565b92915050565b6000602082840312156111c6576111c5610ed5565b5b60006111d48482850161119b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061121782610f65565b915061122283610f65565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561125b5761125a6111dd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112a082610f65565b91506112ab83610f65565b9250826112bb576112ba611266565b5b828204905092915050565b60006112d182610f65565b91506112dc83610f65565b9250828210156112ef576112ee6111dd565b5b828203905092915050565b600061130582610f65565b915061131083610f65565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611345576113446111dd565b5b82820190509291505056fea264697066735822122096e0ece4840ea52f71a448aad8a1c6daa8dafc5caf378689ee044c57f3d059cd64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80635aa6e675116100665780635aa6e675146101355780638ce7442614610153578063906c78bb14610171578063dc01f60d1461018f578063ef5cfb8c146101bf5761009e565b80630a9d793d146100a357806314201289146100bf5780631f68f20a146100dd5780632dfd0bdc146100fb5780633b7fcdca14610105575b600080fd5b6100bd60048036038101906100b89190610f38565b6101db565b005b6100c7610279565b6040516100d49190610f7e565b60405180910390f35b6100e561027f565b6040516100f29190610f7e565b60405180910390f35b610103610285565b005b61011f600480360381019061011a9190610f38565b610306565b60405161012c9190610f7e565b60405180910390f35b61013d61031e565b60405161014a9190610fa8565b60405180910390f35b61015b610344565b6040516101689190611022565b60405180910390f35b61017961036a565b604051610186919061105e565b60405180910390f35b6101a960048036038101906101a49190610f38565b61038e565b6040516101b69190610f7e565b60405180910390f35b6101d960048036038101906101d49190610f38565b61077a565b005b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461023557600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60015481565b60025481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156102e457506000600254145b6102ed57600080fd5b6102f5610b05565b50662386f26fc10000600281905550565b60056020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060025414156103a35760009050610775565b60006105226104ff61044e61271060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044091906110a5565b610e7d90919063ffffffff16565b6104f160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104e091906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b61051460015442610ea990919063ffffffff16565b610e7d90919063ffffffff16565b905060006105c78260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610595573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b991906110a5565b610ebf90919063ffffffff16565b9050600061076c600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d196943c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906110a5565b61075e600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634414e1af896040518263ffffffff1660e01b81526004016106bd9190610fa8565b602060405180830381865afa1580156106da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fe91906110a5565b610750600560008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205487610ea990919063ffffffff16565b610e7d90919063ffffffff16565b610e9390919063ffffffff16565b90508093505050505b919050565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108015750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80610857575060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088d9061112f565b60405180910390fd5b61089e610b05565b5060006108aa8261038e565b14156109835760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906110a5565b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600061098e8261038e565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b81526004016109eb92919061114f565b6020604051808303816000875af1158015610a0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2e91906111b0565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abe91906110a5565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008060009050662386f26fc10000610c5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba691906110a5565b610c4960008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3891906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b11610de2576000610db5610da460008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663242628576040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf391906110a5565b610d9660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8591906110a5565b600254610e7d90919063ffffffff16565b610e9390919063ffffffff16565b600254610ea990919063ffffffff16565b9050610dde81610dd060015442610ea990919063ffffffff16565b610e7d90919063ffffffff16565b9150505b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1930836040518363ffffffff1660e01b8152600401610e3d92919061114f565b600060405180830381600087803b158015610e5757600080fd5b505af1158015610e6b573d6000803e3d6000fd5b50505050426001819055508091505090565b60008183610e8b919061120c565b905092915050565b60008183610ea19190611295565b905092915050565b60008183610eb791906112c6565b905092915050565b60008183610ecd91906112fa565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f0582610eda565b9050919050565b610f1581610efa565b8114610f2057600080fd5b50565b600081359050610f3281610f0c565b92915050565b600060208284031215610f4e57610f4d610ed5565b5b6000610f5c84828501610f23565b91505092915050565b6000819050919050565b610f7881610f65565b82525050565b6000602082019050610f936000830184610f6f565b92915050565b610fa281610efa565b82525050565b6000602082019050610fbd6000830184610f99565b92915050565b6000819050919050565b6000610fe8610fe3610fde84610eda565b610fc3565b610eda565b9050919050565b6000610ffa82610fcd565b9050919050565b600061100c82610fef565b9050919050565b61101c81611001565b82525050565b60006020820190506110376000830184611013565b92915050565b600061104882610fef565b9050919050565b6110588161103d565b82525050565b6000602082019050611073600083018461104f565b92915050565b61108281610f65565b811461108d57600080fd5b50565b60008151905061109f81611079565b92915050565b6000602082840312156110bb576110ba610ed5565b5b60006110c984828501611090565b91505092915050565b600082825260208201905092915050565b7f43616e6e6f7420636c61696d20666f7220616e6f74686572206163636f756e74600082015250565b60006111196020836110d2565b9150611124826110e3565b602082019050919050565b600060208201905081810360008301526111488161110c565b9050919050565b60006040820190506111646000830185610f99565b6111716020830184610f6f565b9392505050565b60008115159050919050565b61118d81611178565b811461119857600080fd5b50565b6000815190506111aa81611184565b92915050565b6000602082840312156111c6576111c5610ed5565b5b60006111d48482850161119b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061121782610f65565b915061122283610f65565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561125b5761125a6111dd565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006112a082610f65565b91506112ab83610f65565b9250826112bb576112ba611266565b5b828204905092915050565b60006112d182610f65565b91506112dc83610f65565b9250828210156112ef576112ee6111dd565b5b828203905092915050565b600061130582610f65565b915061131083610f65565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611345576113446111dd565b5b82820190509291505056fea264697066735822122096e0ece4840ea52f71a448aad8a1c6daa8dafc5caf378689ee044c57f3d059cd64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 531,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "lnx",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)405"
      },
      {
        "astId": 533,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "mintCheckpoint",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 535,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "baseRate",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 538,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "protocol",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IProtocol)525"
      },
      {
        "astId": 540,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 544,
        "contract": "contracts/LNXRewards.sol:LNXRewards",
        "label": "userClaimed",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)405": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IProtocol)525": {
        "encoding": "inplace",
        "label": "contract IProtocol",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}